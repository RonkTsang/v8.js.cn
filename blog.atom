<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>V8</title><subtitle>JavaScript V8 ÂºïÊìé</subtitle><link href="https://v8.js.cn/blog.atom" rel="self"/><link href="https://v8.js.cn/"/><updated>2019-08-28T16:45:00+00:00</updated><id>https://v8.js.cn/</id><author><name>Mathias Bynens</name></author><entry><title>The story of a V8 performance cliff in React</title><link href="https://v8.js.cn/blog/react-cliff/"/><updated>2019-08-28T16:45:00+00:00</updated><id>https://v8.js.cn/blog/react-cliff/</id><author><name>Benedikt Meurer (@bmeurer) and Mathias Bynens (@mathias)</name></author><content type="html">&lt;p&gt;&lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics&quot;&gt;Previously&lt;/a&gt;, we discussed how JavaScript engines optimize object and array access through the use of Shapes and Inline Caches, and we‚Äôve explored &lt;a href=&quot;https://mathiasbynens.be/notes/prototypes&quot;&gt;how engines speed up prototype property access&lt;/a&gt; in particular. This article describes how V8 chooses optimal in-memory representations for various JavaScript values, and how that impacts the shape machinery ‚Äî all of which helps explain &lt;a href=&quot;https://github.com/facebook/react/issues/14365&quot;&gt;a recent V8 performance cliff in React core&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you prefer watching a presentation over reading articles, then enjoy the video below! If not, skip the video and read on.&lt;/p&gt;
&lt;/div&gt;
&lt;figure&gt;
  &lt;div class=&quot;video video-16:9&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/0I0d8LkDqyc&quot; width=&quot;640&quot; height=&quot;360&quot; loading=&quot;lazy&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0I0d8LkDqyc&quot;&gt;‚ÄúJavaScript engine fundamentals: the good, the bad, and the ugly‚Äù&lt;/a&gt; as presented by Mathias Bynens and Benedikt Meurer at AgentConf 2019.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;javascript-types&quot;&gt;JavaScript types &lt;a class=&quot;bookmark&quot; href=&quot;#javascript-types&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every JavaScript value has exactly one of (currently) eight different types: &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;, &lt;code&gt;BigInt&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Undefined&lt;/code&gt;, &lt;code&gt;Null&lt;/code&gt;, and &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/01-javascript-types.svg&quot; width=&quot;913&quot; height=&quot;497&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;With one notable exception, these types are observable in JavaScript through the &lt;code&gt;typeof&lt;/code&gt; operator:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;number&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;string&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;symbol&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;bigint&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;boolean&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;undefined&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;object&#39; ü§î&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;object&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;typeof null&lt;/code&gt; returns &lt;code&gt;&#39;object&#39;&lt;/code&gt;, and not &lt;code&gt;&#39;null&#39;&lt;/code&gt;, despite &lt;code&gt;Null&lt;/code&gt; being a type of its own. To understand why, consider that the set of all JavaScript types is divided into two groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;objects&lt;/em&gt; (i.e. the &lt;code&gt;Object&lt;/code&gt; type)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;primitives&lt;/em&gt; (i.e. any non-object value)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As such, &lt;code&gt;null&lt;/code&gt; means ‚Äúno object value‚Äù, whereas &lt;code&gt;undefined&lt;/code&gt; means ‚Äúno value‚Äù.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/02-primitives-objects.svg&quot; width=&quot;960&quot; height=&quot;384&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Following this line of thought, Brendan Eich designed JavaScript to make &lt;code&gt;typeof&lt;/code&gt; return &lt;code&gt;&#39;object&#39;&lt;/code&gt; for all values on the right-hand side, i.e. all objects and &lt;code&gt;null&lt;/code&gt; values, in the spirit of Java. That‚Äôs why &lt;code&gt;typeof null === &#39;object&#39;&lt;/code&gt; despite the spec having a separate &lt;code&gt;Null&lt;/code&gt; type.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/03-primitives-objects-typeof.svg&quot; width=&quot;960&quot; height=&quot;384&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;value-representation&quot;&gt;Value representation &lt;a class=&quot;bookmark&quot; href=&quot;#value-representation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript engines must be able to represent arbitrary JavaScript values in memory. However, it‚Äôs important to note that the JavaScript type of a value is separate from how JavaScript engines represent that value in memory.&lt;/p&gt;
&lt;p&gt;The value &lt;code&gt;42&lt;/code&gt;, for example, has type &lt;code&gt;number&lt;/code&gt; in JavaScript.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;number&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are several ways to represent an integer number like &lt;code&gt;42&lt;/code&gt; in memory:&lt;/p&gt;
&lt;div class=&quot;table-wrapper&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;representation&lt;/th&gt;
&lt;th&gt;bits&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;two‚Äôs complement 8-bit&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0010 1010&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;two‚Äôs complement 32-bit&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0000 0000 0000 0000 0000 0000 0010 1010&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packed binary-coded decimal (BCD)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0100 0010&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32-bit IEEE-754 floating-point&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0100 0010 0010 1000 0000 0000 0000 0000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64-bit IEEE-754 floating-point&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0100 0000 0100 0101 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;ECMAScript standardizes numbers as 64-bit floating-point values, also known as &lt;em&gt;double precision floating-point&lt;/em&gt; or &lt;em&gt;Float64&lt;/em&gt;. However, that doesn‚Äôt mean that JavaScript engines store numbers in Float64 representation all the time ‚Äî doing so would be terribly inefficient! Engines can choose other internal representations, as long as the observable behavior matches Float64 exactly.&lt;/p&gt;
&lt;p&gt;Most numbers in real-world JavaScript applications happen to be &lt;a href=&quot;https://tc39.es/ecma262/#array-index&quot;&gt;valid ECMAScript array indices&lt;/a&gt;, i.e. integer values in the range from 0 to 2¬≥¬≤‚àí2.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Smallest possible array index.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Greatest possible array index.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JavaScript engines can choose an optimal in-memory representation for such numbers to optimize code that accesses array elements by index. For the processor to do the memory access operation, the array index must be available in &lt;a href=&quot;https://en.wikipedia.org/wiki/Two%27s_complement&quot;&gt;two‚Äôs complement&lt;/a&gt;. Representing array indices as Float64 instead would be wasteful, as the engine would then have to convert back and forth between Float64 and two‚Äôs complement every time someone accesses an array element.&lt;/p&gt;
&lt;p&gt;The 32-bit two‚Äôs complement representation is not just useful for array operations. In general, &lt;strong&gt;processors execute integer operations much faster than floating-point operations&lt;/strong&gt;. That‚Äôs why in the next example, the first loop is easily twice as fast compared to the second loop.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// fast üöÄ&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// slow üêå&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same goes for operations as well. The performance of the modulo operator in the next piece of code depends on whether you‚Äôre dealing with integers or not.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; remainder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; divisor&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Fast üöÄ if `value` and `divisor` are represented as integers,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// slow üêå otherwise.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If both operands are represented as integers, the CPU can compute the result very efficiently. V8 has additional fast-paths for the cases where the &lt;code&gt;divisor&lt;/code&gt; is a power of two. For values represented as floats, the computation is much more complex and takes a lot longer.&lt;/p&gt;
&lt;p&gt;Because integer operations generally execute much faster than floating-point operations, It would seem that engines could just always use two‚Äôs complement for all integers and all results of integer operations. Unfortunately, that would be a violation of the ECMAScript specification! ECMAScript standardizes on Float64, and so &lt;strong&gt;certain integer operations actually produce floats&lt;/strong&gt;. It‚Äôs important that JS engines produce the correct results in such cases.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Float64 has a safe integer range of 53 bits. Beyond that range,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// you must lose precision.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;53&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Float64 supports negative zeros, so -1 * 0 must be -0, but&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// there‚Äôs no way to represent negative zero in two‚Äôs complement.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Float64 has infinities which can be produced through division&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// by zero.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Float64 also has NaNs.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even though the values on the left-hand side are integers, all the values on the right are floats. This is why none of the above operations can be performed correctly using 32-bit two‚Äôs complement. JavaScript engines have to take special care to make sure that integer operations fall back appropriately to produce the fancy Float64 results.&lt;/p&gt;
&lt;p&gt;For small integers in the 31-bit signed integer range, V8 uses a special representation called &lt;code&gt;Smi&lt;/code&gt;. Anything that is not a &lt;code&gt;Smi&lt;/code&gt; is represented as a &lt;code&gt;HeapObject&lt;/code&gt;, which is the address of some entity in memory. For numbers, we use a special kind of &lt;code&gt;HeapObject&lt;/code&gt;, the so-called &lt;code&gt;HeapNumber&lt;/code&gt;, to represent numbers that aren‚Äôt inside the &lt;code&gt;Smi&lt;/code&gt; range.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Smi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;       &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Smi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;         &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Smi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;       &lt;span class=&quot;token number&quot;&gt;4.2&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Smi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Smi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;       &lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the above example shows, some JavaScript numbers are represented as &lt;code&gt;Smi&lt;/code&gt;s, and others are represented as &lt;code&gt;HeapNumber&lt;/code&gt;s. V8 is specifically optimized for &lt;code&gt;Smi&lt;/code&gt;s, because small integers are so common in real-world JavaScript programs. &lt;code&gt;Smi&lt;/code&gt;s don‚Äôt need to be allocated as dedicated entities in memory, and enable fast integer operations in general.&lt;/p&gt;
&lt;p&gt;The important take-away here is that &lt;strong&gt;even values with the same JavaScript type can be represented in completely different ways&lt;/strong&gt; behind the scenes, as an optimization.&lt;/p&gt;
&lt;h3 id=&quot;smi-heapnumber-mutableheapnumber&quot;&gt;&lt;code&gt;Smi&lt;/code&gt; vs. &lt;code&gt;HeapNumber&lt;/code&gt; vs. &lt;code&gt;MutableHeapNumber&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;#smi-heapnumber-mutableheapnumber&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here‚Äôs how that works under the hood. Let‚Äôs say you have the following object:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// Smi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HeapNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The value &lt;code&gt;42&lt;/code&gt; for &lt;code&gt;x&lt;/code&gt; can be encoded as &lt;code&gt;Smi&lt;/code&gt;, so it can be stored inside of the object itself. The value &lt;code&gt;4.2&lt;/code&gt; on the other hand needs a separate entity to hold the value, and the object points to that entity.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/04-smi-vs-heapnumber.svg&quot; width=&quot;960&quot; height=&quot;287&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Now, let‚Äôs say we run the following JavaScript snippet:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí o.x is now 52&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí o.y is now 5.2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, the value of &lt;code&gt;x&lt;/code&gt; can be updated in-place, since the new value &lt;code&gt;52&lt;/code&gt; also fits the &lt;code&gt;Smi&lt;/code&gt; range.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/05-update-smi.svg&quot; width=&quot;960&quot; height=&quot;301&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;However, the new value of &lt;code&gt;y=5.2&lt;/code&gt; does not fit into a &lt;code&gt;Smi&lt;/code&gt; and is also different from the previous value &lt;code&gt;4.2&lt;/code&gt;, so V8 has to allocate a new &lt;code&gt;HeapNumber&lt;/code&gt; entity for the assignment to &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/06-update-heapnumber.svg&quot; width=&quot;960&quot; height=&quot;375&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;HeapNumber&lt;/code&gt;s are not mutable, which enables certain optimizations. For example, if we assign &lt;code&gt;y&lt;/code&gt;s value to &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí o.x is now 5.2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‚Ä¶we can now just link to the same &lt;code&gt;HeapNumber&lt;/code&gt; instead of allocating a new one for the same value.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/07-heapnumbers.svg&quot; width=&quot;960&quot; height=&quot;411&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;One downside to &lt;code&gt;HeapNumber&lt;/code&gt;s being immutable is that it would be slow to update fields with values outside the &lt;code&gt;Smi&lt;/code&gt; range often, like in the following example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Create a `HeapNumber` instance.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Create an additional `HeapNumber` instance.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line would create a &lt;code&gt;HeapNumber&lt;/code&gt; instance with the initial value &lt;code&gt;0.1&lt;/code&gt;. The loop body changes this value to &lt;code&gt;1.1&lt;/code&gt;, &lt;code&gt;2.1&lt;/code&gt;, &lt;code&gt;3.1&lt;/code&gt;, &lt;code&gt;4.1&lt;/code&gt;, and finally &lt;code&gt;5.1&lt;/code&gt;, creating a total of six &lt;code&gt;HeapNumber&lt;/code&gt; instances along the way, five of which are garbage once the loop finishes.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/08-garbage-heapnumbers.svg&quot; width=&quot;960&quot; height=&quot;432&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;To avoid this problem, V8 provides a way to update non-&lt;code&gt;Smi&lt;/code&gt; number fields in-place as well, as an optimization. When a numeric field holds values outside the &lt;code&gt;Smi&lt;/code&gt; range, V8 marks that field as a &lt;code&gt;Double&lt;/code&gt; field on the shape, and allocates a so-called &lt;code&gt;MutableHeapNumber&lt;/code&gt; that holds the actual value encoded as Float64.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/09-mutableheapnumber.svg&quot; width=&quot;960&quot; height=&quot;518&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;When your field‚Äôs value changes, V8 no longer needs to allocate a new &lt;code&gt;HeapNumber&lt;/code&gt;, but instead can just update the &lt;code&gt;MutableHeapNumber&lt;/code&gt; in-place.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/10-update-mutableheapnumber.svg&quot; width=&quot;960&quot; height=&quot;500&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;However, there‚Äôs a catch to this approach as well. Since the value of a &lt;code&gt;MutableHeapNumber&lt;/code&gt; can change, it‚Äôs important that these are not passed around.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/11-mutableheapnumber-to-heapnumber.svg&quot; width=&quot;960&quot; height=&quot;513&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;For example, if you assign &lt;code&gt;o.x&lt;/code&gt; to some other variable &lt;code&gt;y&lt;/code&gt;, you wouldn‚Äôt want the value of &lt;code&gt;y&lt;/code&gt; to change the next time &lt;code&gt;o.x&lt;/code&gt; changes ‚Äî that would be a violation of the JavaScript spec! So when &lt;code&gt;o.x&lt;/code&gt; is accessed, the number must be &lt;em&gt;re-boxed&lt;/em&gt; into a regular &lt;code&gt;HeapNumber&lt;/code&gt; before assigning it to &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For floats, V8 performs all the above-mentioned ‚Äúboxing‚Äù magic behind the scenes. But for small integers it would be wasteful to go with the &lt;code&gt;MutableHeapNumber&lt;/code&gt; approach, since &lt;code&gt;Smi&lt;/code&gt; is a more efficient representation.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí no ‚Äúboxing‚Äù for `x` in object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí update the value of `x` inside object&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To avoid the inefficiency, all we have to do for small integers is mark the field on the shape as &lt;code&gt;Smi&lt;/code&gt; representation, and simply update the number value in place as long as it fits the small integer range.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/12-smi-no-boxing.svg&quot; width=&quot;960&quot; height=&quot;424&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;shape-deprecations-and-migrations&quot;&gt;Shape deprecations and migrations &lt;a class=&quot;bookmark&quot; href=&quot;#shape-deprecations-and-migrations&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So what if a field initially contains a &lt;code&gt;Smi&lt;/code&gt;, but later holds a number outside the small integer range? Like in this case, with two objects both using the same shape where &lt;code&gt;x&lt;/code&gt; is represented as &lt;code&gt;Smi&lt;/code&gt; initially:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí objects have `x` as `Smi` field now&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí `b.x` is now represented as a `Double`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This starts out with two objects pointing to the same shape, where &lt;code&gt;x&lt;/code&gt; is marked as &lt;code&gt;Smi&lt;/code&gt; representation:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/13-shape.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;When &lt;code&gt;b.x&lt;/code&gt; changes to &lt;code&gt;Double&lt;/code&gt; representation, V8 allocates a new shape where &lt;code&gt;x&lt;/code&gt; is assigned &lt;code&gt;Double&lt;/code&gt; representation, and which points back to the empty shape. V8 also allocates a &lt;code&gt;MutableHeapNumber&lt;/code&gt; to hold the new value &lt;code&gt;0.2&lt;/code&gt; for the &lt;code&gt;x&lt;/code&gt; property. Then we update the object &lt;code&gt;b&lt;/code&gt; to point to this new shape, and change the slot in the object to point to the previously allocated &lt;code&gt;MutableHeapNumber&lt;/code&gt; at offset 0. And finally, we mark the old shape as deprecated and unlink it from the transition tree. This is done by having a new transition for &lt;code&gt;&#39;x&#39;&lt;/code&gt; from the empty shape to the newly-created shape.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/14-shape-transition.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;We cannot completely remove the old shape at this point, since it is still used by &lt;code&gt;a&lt;/code&gt;, and it would be way too expensive to traverse the memory to find all objects pointing to the old shape and update them eagerly. Instead V8 does this lazily: any property access or assignment to &lt;code&gt;a&lt;/code&gt; migrates it to the new shape first. The idea is to eventually make the deprecated shape unreachable and to have the garbage collector remove it.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/15-shape-deprecation.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;A trickier case occurs if the field that changes representation is &lt;em&gt;not&lt;/em&gt; the last one in the chain:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  z&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In that case V8 needs to find the so-called &lt;em&gt;split shape&lt;/em&gt;, which is the last shape in the chain before the relevant property gets introduced. Here we‚Äôre changing &lt;code&gt;y&lt;/code&gt;, so we need to find the last shape that doesn&#39;t have &lt;code&gt;y&lt;/code&gt;, which in our example is the shape that introduced &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/16-split-shape.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Starting from the split shape, we create a new transition chain for &lt;code&gt;y&lt;/code&gt; which replays all the previous transitions, but with &lt;code&gt;&#39;y&#39;&lt;/code&gt; being marked as &lt;code&gt;Double&lt;/code&gt; representation. And we use this new transition chain for &lt;code&gt;y&lt;/code&gt;, marking the old subtree as deprecated. In the last step we migrate the instance &lt;code&gt;o&lt;/code&gt; to the new shape, using a &lt;code&gt;MutableHeapNumber&lt;/code&gt; to hold the value of &lt;code&gt;y&lt;/code&gt; now. This way, new objects do not take the old path, and once all references to the old shape are gone, the deprecated shape part of the tree disappears.&lt;/p&gt;
&lt;h2 id=&quot;extensibility-and-integrity-level-transitions&quot;&gt;Extensibility and integrity-level transitions &lt;a class=&quot;bookmark&quot; href=&quot;#extensibility-and-integrity-level-transitions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Object.preventExtensions()&lt;/code&gt; prevents new properties from ever being added to an object. If you try, it throws an exception. (If you‚Äôre not in strict mode, it doesn‚Äôt throw but it silently does nothing.)&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventExtensions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TypeError: Cannot add property y;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//            object is not extensible&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Object.seal&lt;/code&gt; does the same as &lt;code&gt;Object.preventExtensions&lt;/code&gt;, but it also marks all properties as non-configurable, meaning you can‚Äôt delete them, or change their enumerability, configurability, or writability.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;seal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TypeError: Cannot add property y;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//            object is not extensible&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TypeError: Cannot delete property x&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Object.freeze&lt;/code&gt; does the same as &lt;code&gt;Object.seal&lt;/code&gt;, but it also prevents the values of existing properties from being changed by marking them non-writable.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;freeze&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TypeError: Cannot add property y;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//            object is not extensible&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TypeError: Cannot delete property x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// TypeError: Cannot assign to read-only property x&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let‚Äôs consider this concrete example, with two objects which both have a single property &lt;code&gt;x&lt;/code&gt;, and where we then prevent any further extensions to the second object.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventExtensions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It starts out like we already know, transitioning from the empty shape to a new shape that holds the property &lt;code&gt;&#39;x&#39;&lt;/code&gt; (represented as &lt;code&gt;Smi&lt;/code&gt;). When we prevent extensions to &lt;code&gt;b&lt;/code&gt;, we perform a special transition to a new shape which is marked as non-extensible. This special transition doesn‚Äôt introduce any new property ‚Äî it‚Äôs really just a marker.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/17-shape-nonextensible.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Note how we can‚Äôt just update the shape with &lt;code&gt;x&lt;/code&gt; in-place, since that is needed by the other object &lt;code&gt;a&lt;/code&gt;, which is still extensible.&lt;/p&gt;
&lt;h2 id=&quot;react&quot;&gt;The React performance issue &lt;a class=&quot;bookmark&quot; href=&quot;#react&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let‚Äôs put it all together and use what we learned to understand &lt;a href=&quot;https://github.com/facebook/react/issues/14365&quot;&gt;the recent React issue #14365&lt;/a&gt;. When the React team profiled a real-world application, they spotted an odd V8 performance cliff that affected React‚Äôs core. Here‚Äôs a simplified repro for the bug:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventExtensions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have an object with two fields that have &lt;code&gt;Smi&lt;/code&gt; representation. We prevent any further extensions to the object, and eventually force the second field to &lt;code&gt;Double&lt;/code&gt; representation.&lt;/p&gt;
&lt;p&gt;As we learned before, this creates roughly the following setup:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/18-repro-shape-setup.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Both properties are marked as &lt;code&gt;Smi&lt;/code&gt; representation, and the final transition is the extensibility transition to mark the shape as non-extensible.&lt;/p&gt;
&lt;p&gt;Now we need to change &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;Double&lt;/code&gt; representation, which means we need to again start by finding the split shape. In this case, it‚Äôs the shape that introduced &lt;code&gt;x&lt;/code&gt;. But now V8 got confused, since the split shape was extensible while the current shape was marked as non-extensible. And V8 didn‚Äôt really know how to replay the transitions properly in this case. So V8 essentially just gave up trying to make sense of this, and instead created a separate shape that is not connected to the existing shape tree and not shared with any other objects. Think of it as an &lt;em&gt;orphaned shape&lt;/em&gt;:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/19-orphaned-shape.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;You can imagine it‚Äôs pretty bad if this happens to lots of objects, since that renders the whole shape system useless.&lt;/p&gt;
&lt;p&gt;In the case of React, here‚Äôs what happened: each &lt;code&gt;FiberNode&lt;/code&gt; has a couple of fields that are supposed to hold timestamps when profiling is turned on.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FiberNode&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actualStartTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventExtensions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; node1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FiberNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; node2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FiberNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These fields (such as &lt;code&gt;actualStartTime&lt;/code&gt;) are initialized with &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt;, and thus start out with &lt;code&gt;Smi&lt;/code&gt; representation. But later, actual floating-point timestamps from &lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-now&quot;&gt;&lt;code&gt;performance.now()&lt;/code&gt;&lt;/a&gt; are stored in these fields, causing them to go to &lt;code&gt;Double&lt;/code&gt; representation, since they don‚Äôt fit into a &lt;code&gt;Smi&lt;/code&gt;. On top of that, React also prevents extensions to &lt;code&gt;FiberNode&lt;/code&gt; instances.&lt;/p&gt;
&lt;p&gt;Initially the simplified example above looked like this:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/20-fibernode-shape.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;There are two instances sharing a shape tree, all working as intended. But then, as you store the real timestamp, V8 gets confused finding the split shape:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/21-orphan-islands.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;V8 assigns a new orphaned shape to &lt;code&gt;node1&lt;/code&gt;, and the same thing happens to &lt;code&gt;node2&lt;/code&gt; some time later, resulting in two &lt;em&gt;orphan islands&lt;/em&gt;, each with their own disjoint shapes. Many real-world React apps don‚Äôt just have two, but rather tens of thousands of these &lt;code&gt;FiberNode&lt;/code&gt;s. As you can imagine, this situation was not particularly great for V8‚Äôs performance.&lt;/p&gt;
&lt;p&gt;Luckily, &lt;a href=&quot;https://chromium-review.googlesource.com/c/v8/v8/+/1442640/&quot;&gt;we‚Äôve fixed this performance cliff&lt;/a&gt; in &lt;a href=&quot;https://v8.js.cn/blog/v8-release-74&quot;&gt;V8 v7.4&lt;/a&gt;, and we‚Äôre &lt;a href=&quot;https://bit.ly/v8-in-place-field-representation-changes&quot;&gt;looking into making field representation changes cheaper&lt;/a&gt; to remove any remaining performance cliffs. With the fix, V8 now does the right thing:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/22-fix.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;The two &lt;code&gt;FiberNode&lt;/code&gt; instances point to the non-extensible shape where &lt;code&gt;&#39;actualStartTime&#39;&lt;/code&gt; is a &lt;code&gt;Smi&lt;/code&gt; field. When the first assignment to &lt;code&gt;node1.actualStartTime&lt;/code&gt; happens, a new transition chain is created and the previous chain is marked as deprecated:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/23-fix-fibernode-shape-1.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Note how the extensibility transition is now properly replayed in the new chain.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/react-cliff/24-fix-fibernode-shape-2.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;After the assignment to &lt;code&gt;node2.actualStartTime&lt;/code&gt;, both nodes refer to the new shape, and the deprecated part of the transition tree can be cleaned up by the garbage collector.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You might think all this shape deprecation/migration is complex, and you‚Äôd be right. In fact, we have a suspicion that on real-world websites it causes more issues (in terms of performance, memory use, and complexity) than it helps, particularly since with &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=7703&quot;&gt;pointer compression&lt;/a&gt; we‚Äôll no longer be able to use it to store double-valued fields in-line in the object. So, we‚Äôre hoping to &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=9606&quot;&gt;remove V8‚Äôs shape deprecation mechanism entirely&lt;/a&gt;. You could say it‚Äôs &lt;em&gt;*puts on sunglasses*&lt;/em&gt; being deprecated. &lt;em&gt;YEEEAAAHHH‚Ä¶&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The React team &lt;a href=&quot;https://github.com/facebook/react/pull/14383&quot;&gt;mitigated the problem on their end&lt;/a&gt; by making sure that all the time and duration fields on &lt;code&gt;FiberNode&lt;/code&gt;s start out with &lt;code&gt;Double&lt;/code&gt; representation:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FiberNode&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Force `Double` representation from the start.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actualStartTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Number&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Later, you can still initialize to the value you want:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actualStartTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventExtensions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; node1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FiberNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; node2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FiberNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of &lt;code&gt;Number.NaN&lt;/code&gt;, any floating-point value that doesn‚Äôt fit the &lt;code&gt;Smi&lt;/code&gt; range could be used. Examples include &lt;code&gt;0.000001&lt;/code&gt;, &lt;code&gt;Number.MIN_VALUE&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, and &lt;code&gt;Infinity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It‚Äôs worth pointing out that the concrete React bug was V8-specific and that in general, developers shouldn‚Äôt optimize for a specific version of a JavaScript engine. Still, it‚Äôs nice to have a handle when things don&#39;t work.&lt;/p&gt;
&lt;p&gt;Keep in mind that the JavaScript engine performs some magic under the hood, and you can help it by not mixing types if possible. For example, don‚Äôt initialize your numeric fields with &lt;code&gt;null&lt;/code&gt;, as that disables all the benefits from the field representation tracking, and it makes your code more readable:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Don‚Äôt do this!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;402&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In other words, &lt;strong&gt;write readable code, and performance will follow!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;takeaways&quot;&gt;Take-aways &lt;a class=&quot;bookmark&quot; href=&quot;#takeaways&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We‚Äôve covered the following in this deep-dive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript distinguishes between ‚Äúprimitives‚Äù and ‚Äúobjects‚Äù, and &lt;code&gt;typeof&lt;/code&gt; is a liar.&lt;/li&gt;
&lt;li&gt;Even values with the same JavaScript type can have different representations behind the scenes.&lt;/li&gt;
&lt;li&gt;V8 tries to find the optimal representation for every property in your JavaScript programs.&lt;/li&gt;
&lt;li&gt;We‚Äôve discussed how V8 deals with shape deprecations and migrations, including extensibility transitions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Based on this knowledge, we identified some practical JavaScript coding tips that can help boost performance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always initialize your objects in the same way, so that shapes can be effective.&lt;/li&gt;
&lt;li&gt;Choose sensible initial values for your fields to help JavaScript engines with representation selection.&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>V8 release v7.7</title><link href="https://v8.js.cn/blog/v8-release-77/"/><updated>2019-08-13T16:45:00+00:00</updated><id>https://v8.js.cn/blog/v8-release-77/</id><author><name>Mathias Bynens (@mathias), lazy allocator of release notes</name></author><content type="html">&lt;p&gt;Every six weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.js.cn/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8‚Äôs Git master immediately before a Chrome Beta milestone. Today we‚Äôre pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/7.7&quot;&gt;V8 version 7.7&lt;/a&gt;, which is in beta until its release in coordination with Chrome 77 Stable in several weeks. V8 v7.7 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance (size &amp;amp; speed) &lt;a class=&quot;bookmark&quot; href=&quot;#performance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;lazy-feedback-allocation&quot;&gt;Lazy feedback allocation &lt;a class=&quot;bookmark&quot; href=&quot;#lazy-feedback-allocation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In order to optimize JavaScript, V8 collects feedback about the types of operands which are passed to various operations (e.g. &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;o.foo&lt;/code&gt;). This feedback is used to optimize these operations by tailoring them to those specific types. This information is stored in ‚Äúfeedback vectors‚Äù, and while this information is very important to achieve faster execution times, we also pay a cost for the memory usage required to allocate these feedback vectors.&lt;/p&gt;
&lt;p&gt;To reduce V8‚Äôs memory usage, we now allocate the feedback vectors lazily only after the function has executed a certain amount of bytecode. This avoids allocating feedback vectors for short-lived functions that don‚Äôt benefit from the feedback collected. Our lab experiments show that lazily allocating feedback vectors saves about 2‚Äì8% of V8 heap size.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-77/lazy-feedback-allocation.svg&quot; width=&quot;904&quot; height=&quot;365&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Our experiments from the wild show that this reduces V8‚Äôs heap size by 1‚Äì2% on desktop and 5‚Äì6% on mobile platforms for the users of Chrome. There are no performance regressions on desktop, and on mobile platforms we actually saw a performance improvement on low-end phones with limited memory. Please look out for a more detailed blog post on our recent work to save memory.&lt;/p&gt;
&lt;h3 id=&quot;wasm-compilation&quot;&gt;Scalable WebAssembly background compilation &lt;a class=&quot;bookmark&quot; href=&quot;#wasm-compilation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over the last milestones, we worked on scalability of background compilation of WebAssembly. The more cores your computer has, the more you benefit from this effort. The graphs below have been created on a 24-core Xeon machine, compiling &lt;a href=&quot;https://s3.amazonaws.com/mozilla-games/ZenGarden/EpicZenGarden.html&quot;&gt;the Epic ZenGarden demo&lt;/a&gt;. Depending on the number of threads used, compilation takes less than half of the time compared to V8 v7.4.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-77/liftoff-compilation-speedup.svg&quot; width=&quot;514&quot; height=&quot;203&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-77/turbofan-compilation-speedup.svg&quot; width=&quot;514&quot; height=&quot;203&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;stack-trace-improvements&quot;&gt;Stack trace improvements &lt;a class=&quot;bookmark&quot; href=&quot;#stack-trace-improvements&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Almost all errors thrown by V8 capture a stack trace when they are created. This stack trace can be accessed from JavaScript through the non-standard &lt;code&gt;error.stack&lt;/code&gt; property. The first time a stack trace is retrieved via &lt;code&gt;error.stack&lt;/code&gt;, V8 serializes the underlying structured stack trace into a string. This serialized stack trace is kept around to speed up future &lt;code&gt;error.stack&lt;/code&gt; accesses.&lt;/p&gt;
&lt;p&gt;Over the last few versions we worked on some &lt;a href=&quot;https://docs.google.com/document/d/1WIpwLgkIyeHqZBc9D3zDtWr7PL-m_cH6mfjvmoC6kSs/edit&quot;&gt;internal refactorings to the stack trace logic&lt;/a&gt; (&lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=8742&quot;&gt;tracking bug&lt;/a&gt;), simplifying the code and improving stack trace serialization performance by up to 30%.&lt;/p&gt;
&lt;h2 id=&quot;javascript-language-features&quot;&gt;JavaScript language features &lt;a class=&quot;bookmark&quot; href=&quot;#javascript-language-features&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://v8.js.cn/features/intl-numberformat&quot;&gt;The &lt;code&gt;Intl.NumberFormat&lt;/code&gt; API&lt;/a&gt; for locale-aware number formatting gains new functionality in this release! It now supports compact notation, scientific notation, engineering notation, sign display, and units of measurement.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; formatter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NumberFormat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  style&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;unit&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  unit&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;meter-per-second&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;formatter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;299792458&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;299,792,458 m/s&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Refer to &lt;a href=&quot;https://v8.js.cn/features/intl-numberformat&quot;&gt;our feature explainer&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;#v8-api&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/7.6..branch-heads/7.7 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an &lt;a href=&quot;https://v8.js.cn/docs/source-code#using-git&quot;&gt;active V8 checkout&lt;/a&gt; can use &lt;code&gt;git checkout -b 7.7 -t branch-heads/7.7&lt;/code&gt; to experiment with the new features in V8 v7.7. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome‚Äôs Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>Emscripten and the LLVM WebAssembly backend</title><link href="https://v8.js.cn/blog/emscripten-llvm-wasm/"/><updated>2019-07-01T16:45:00+00:00</updated><id>https://v8.js.cn/blog/emscripten-llvm-wasm/</id><author><name>Alon Zakai</name></author><content type="html">&lt;p&gt;WebAssembly is normally compiled from a source language, which means that developers need &lt;em&gt;tools&lt;/em&gt; to use it. Because of that, the V8 team works on relevant open-source projects like &lt;a href=&quot;http://llvm.org/&quot;&gt;LLVM&lt;/a&gt;, &lt;a href=&quot;https://emscripten.org/&quot;&gt;Emscripten&lt;/a&gt;, &lt;a href=&quot;https://github.com/WebAssembly/binaryen/&quot;&gt;Binaryen&lt;/a&gt;, and &lt;a href=&quot;https://github.com/WebAssembly/wabt&quot;&gt;WABT&lt;/a&gt;. This post describes some of the work we‚Äôve been doing on Emscripten and LLVM, which will soon allow Emscripten to switch to the &lt;a href=&quot;https://github.com/llvm/llvm-project/tree/master/llvm/lib/Target/WebAssembly&quot;&gt;LLVM WebAssembly backend&lt;/a&gt; by default ‚Äî please test it and report any issues!&lt;/p&gt;
&lt;p&gt;The LLVM WebAssembly backend has been an option in Emscripten for some time, as we have been working on the backend in parallel to its integration in Emscripten, and in collaboration with others in the open source WebAssembly tools community. It has now reached the point where the WebAssembly backend beats the old ‚Äú&lt;a href=&quot;https://github.com/emscripten-core/emscripten-fastcomp/&quot;&gt;fastcomp&lt;/a&gt;‚Äù backend on most metrics, and therefore we would like to switch the default to it. This announcement is happening before that, to get as much testing as we can first.&lt;/p&gt;
&lt;p&gt;This is an important upgrade for several exciting reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Much faster linking&lt;/strong&gt;: the LLVM WebAssembly backend together with &lt;a href=&quot;https://lld.llvm.org/WebAssembly.html&quot;&gt;&lt;code&gt;wasm-ld&lt;/code&gt;&lt;/a&gt; has full support for incremental compilation using WebAssembly object files. Fastcomp used LLVM IR in bitcode files, which meant that at link time all the IR would be compiled by LLVM. This was the main reason for slow link times. With WebAssembly object files on the other hand, &lt;code&gt;.o&lt;/code&gt; files contain already-compiled WebAssembly (in a relocatable form that can be linked, much like native linking). As a result the link step can be much, much faster than with fastcomp ‚Äî we‚Äôll see a real-world measurement below with a 7√ó speedup!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Faster and smaller code&lt;/strong&gt;: We‚Äôve worked hard on the LLVM WebAssembly backend as well as on the Binaryen optimizer which Emscripten runs after it. The result is that the LLVM WebAssembly backend path now beats fastcomp on both speed and size on most benchmarks we track.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support all LLVM IR&lt;/strong&gt;: Fastcomp could handle the LLVM IR emitted by &lt;code&gt;clang&lt;/code&gt;, but because of its architecture it often failed on other sources, specifically on ‚Äúlegalizing‚Äù the IR into types that fastcomp could handle. The LLVM WebAssembly backend on the other hand uses the common LLVM backend infrastructure, so it can handle everything.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New WebAssembly features&lt;/strong&gt;: Fastcomp compiles to asm.js before running &lt;code&gt;asm2wasm&lt;/code&gt;, which means that it is difficult to handle new WebAssembly features like tail calls, exceptions, SIMD, and so forth. The WebAssembly backend is the natural place to work on those, and we are in fact working on all of the features just mentioned!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Faster general updates from upstream&lt;/strong&gt;: Related to the last point, using the upstream WebAssembly backend means we can use very latest LLVM upstream at all times, which means we can get new C++ language features in &lt;code&gt;clang&lt;/code&gt;, new LLVM IR optimizations, etc. as soon as they land.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing &lt;a class=&quot;bookmark&quot; href=&quot;#testing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To test the WebAssembly backend, simply use the &lt;a href=&quot;https://github.com/emscripten-core/emsdk&quot;&gt;latest &lt;code&gt;emsdk&lt;/code&gt;&lt;/a&gt; and do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emsdk install latest-upstream
emsdk activate latest-upstream
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‚ÄúUpstream‚Äù here refers to the fact that the LLVM WebAssembly backend is in upstream LLVM, unlike fastcomp. In fact, since it‚Äôs in upstream, you don‚Äôt need to use the &lt;code&gt;emsdk&lt;/code&gt; if you build plain LLVM+&lt;code&gt;clang&lt;/code&gt; yourself! (To use such a build with Emscripten, just add the path to it in your &lt;code&gt;.emscripten&lt;/code&gt; file.)&lt;/p&gt;
&lt;p&gt;Currently using &lt;code&gt;emsdk [install|activate] latest&lt;/code&gt; still uses fastcomp. There is also ‚Äúlatest-fastcomp‚Äù which does the same. When we switch the default backend, we will make ‚Äúlatest‚Äù do the same as ‚Äúlatest-upstream‚Äù, and at that time ‚Äúlatest-fastcomp‚Äù will be the only way to get fastcomp. Fastcomp remains an option while it is still useful; see more notes about this at the end.&lt;/p&gt;
&lt;h2 id=&quot;history&quot;&gt;History &lt;a class=&quot;bookmark&quot; href=&quot;#history&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This will be the &lt;strong&gt;third&lt;/strong&gt; backend in Emscripten, and the &lt;strong&gt;second&lt;/strong&gt; migration. The first backend was written in JavaScript and parsed LLVM IR in text form. This was useful for experimentation back in 2010, but had obvious downsides, including that LLVM‚Äôs text format would change and compilation speed wasn‚Äôt as fast as we wanted. In 2013 a new backend was written in a fork of LLVM, nicknamed ‚Äúfastcomp‚Äù. It was designed to emit &lt;a href=&quot;https://en.wikipedia.org/wiki/Asm.js&quot;&gt;asm.js&lt;/a&gt;, which the earlier JS backend had been hacked to do (but didn‚Äôt do very well). As a result it was a big improvement in code quality and compile times.&lt;/p&gt;
&lt;p&gt;It was also a relatively minor change in Emscripten. While Emscripten is a compiler, the original backend and fastcomp have always been a fairly small part of the project ‚Äî far more code goes into system libraries, toolchain integration, language bindings, and so forth. So while switching the compiler backend is a dramatic change, it affects just one part of the overall project.&lt;/p&gt;
&lt;h2 id=&quot;benchmarks&quot;&gt;Benchmarks &lt;a class=&quot;bookmark&quot; href=&quot;#benchmarks&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;code-size&quot;&gt;Code size &lt;a class=&quot;bookmark&quot; href=&quot;#code-size&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/emscripten-llvm-wasm/size.svg&quot; width=&quot;600&quot; height=&quot;371&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Code size measurements (lower is better)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;(All sizes here are normalized to fastcomp.) As you can see, the WebAssembly backend‚Äôs sizes are almost always smaller! The difference is more noticeable on the smaller microbenchmarks on the left (names in lowercase), where new improvements in system libraries matter more. But there is a code size reduction even on most of the macrobenchmarks on the right (names in UPPERCASE), which are real-world codebases. The one regression on the macrobenchmarks is LZMA, where newer LLVM makes a different inlining decision that ends up unlucky.&lt;/p&gt;
&lt;p&gt;Overall, the macrobenchmarks shrink by an average of &lt;strong&gt;3.7%&lt;/strong&gt;. Not bad for a compiler upgrade! We see similar things on real-world codebases that are not in the test suite, for example, &lt;a href=&quot;https://github.com/kripken/BananaBread/&quot;&gt;BananaBread&lt;/a&gt;, a port of the &lt;a href=&quot;http://cubeengine.com/&quot;&gt;Cube 2 game engine&lt;/a&gt; to the Web, shrinks by over &lt;strong&gt;6%&lt;/strong&gt;, and &lt;a href=&quot;http://www.continuation-labs.com/projects/d3wasm/&quot;&gt;Doom 3 shrinks by&lt;/a&gt; &lt;strong&gt;15%&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;These size improvements (and the speed improvements we‚Äôll discuss next) are due to several factors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LLVM‚Äôs backend codegen is smart and can do things that simple backends like fastcomp can‚Äôt, like &lt;a href=&quot;https://en.wikipedia.org/wiki/Value_numbering&quot;&gt;GVN&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Newer LLVM has better IR optimizations.&lt;/li&gt;
&lt;li&gt;We‚Äôve worked a lot on tuning the Binaryen optimizer on the WebAssembly backend‚Äôs output, as mentioned earlier.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;speed&quot;&gt;Speed &lt;a class=&quot;bookmark&quot; href=&quot;#speed&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/emscripten-llvm-wasm/speed.svg&quot; width=&quot;600&quot; height=&quot;371&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Speed measurements (lower is better)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;(Measurements are on V8.) Among the microbenchmarks, speed is a mixed picture ‚Äî which is not that surprising, since most of them are dominated by a single function or even loop, so any change to the code Emscripten emits can lead to a lucky or unlucky optimization choice by the VM. Overall, about an equal number of microbenchmarks stay the same as those that improve or those that regress. Looking at the more realistic macrobenchmarks, once more LZMA is an outlier, again because of an unlucky inlining decision as mentioned earlier, but otherwise every single macrobenchmark improves!&lt;/p&gt;
&lt;p&gt;The average change on the macrobenchmarks is a speedup of &lt;strong&gt;3.2%&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;build-time&quot;&gt;Build time &lt;a class=&quot;bookmark&quot; href=&quot;#build-time&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/emscripten-llvm-wasm/build.svg&quot; width=&quot;600&quot; height=&quot;371&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Compile and link time measurements on BananaBread (lower is better)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Build time changes will vary by project, but here are some example numbers from BananaBread, which is a complete but compact game engine consisting of 112 files and 95,287 lines of code. On the left we have build times for the compile step, that is, compiling source files to object files, using the project‚Äôs default &lt;code&gt;-O3&lt;/code&gt; (all times are normalized to fastcomp). As you can see, the compile step takes slightly longer with the WebAssembly backend, which makes sense because we are doing more work at this stage ‚Äî instead of just compiling source to bitcode as fastcomp does, we also compile the bitcode to WebAssembly.&lt;/p&gt;
&lt;p&gt;Looking on the right, we have the numbers for the link step (also normalized to fastcomp), that is, producing the final executable, here with &lt;code&gt;-O0&lt;/code&gt; which is suitable for an incremental build (for a fully-optimized one, you would probably use &lt;code&gt;-O3&lt;/code&gt; as well, see below). It turns out that the slight increase during the compile step is worth it, because the link is &lt;strong&gt;over 7√ó faster&lt;/strong&gt;! That‚Äôs the real advantage of incremental compilation: most of the link step is just a quick concatenation of object files. And if you change just one source file and rebuild then almost all you need is that fast link step, so you can see this speedup all the time during real-world development.&lt;/p&gt;
&lt;p&gt;As mentioned above, build time changes will vary by project. In a smaller project than BananaBread the link time speedup may be smaller, while on a bigger project it may be larger. Another factor is optimizations: as mentioned above, the test linked with &lt;code&gt;-O0&lt;/code&gt;, but for a release build you‚Äôll want &lt;code&gt;-O3&lt;/code&gt; probably, and in that case Emscripten will invoke the Binaryen optimizer on the final WebAssembly, run &lt;a href=&quot;https://hacks.mozilla.org/2018/01/shrinking-webassembly-and-javascript-code-sizes-in-emscripten/&quot;&gt;meta-dce&lt;/a&gt;, and other useful things for code size and speed. That takes extra time, of course, and it‚Äôs worth it for a release build ‚Äî on BananaBread it shrinks the WebAssembly from 2.65 to 1.84 MB, an improvement of over &lt;strong&gt;30%&lt;/strong&gt; ‚Äî but for a quick incremental build you can skip that with &lt;code&gt;-O0&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;known-issues&quot;&gt;Known issues &lt;a class=&quot;bookmark&quot; href=&quot;#known-issues&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While the LLVM WebAssembly backend generally wins on both code size and speed, we have seen some exceptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/emscripten-core/emscripten/blob/incoming/tests/fasta.cpp&quot;&gt;Fasta&lt;/a&gt; regresses without &lt;a href=&quot;https://github.com/WebAssembly/nontrapping-float-to-int-conversions&quot;&gt;nontrapping float to int conversions&lt;/a&gt;, a new WebAssembly feature that was not in the WebAssembly MVP. The underlying issue is that in the MVP a float to int conversion will trap if it was out of the range of valid integers. The reasoning was that this is undefined behavior in C anyhow, and easy for VMs to implement. However, this turned out to be a poor match for how LLVM compiles float to int conversions, with the result that extra guards are needed, adding code size and overhead. The newer non-trapping operations avoid that, but may not be present in all browsers yet. You can use them by compiling source files with &lt;code&gt;-mnontrapping-fptoint&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The LLVM WebAssembly backend is not just a different backend than fastcomp but also uses a much newer LLVM. Newer LLVM may make different inlining decisions, which (like all inlining decisions in the absence of profile-guided optimization) are heuristic-driven and may end up helping or hurting. A specific example we mentioned earlier is in the LZMA benchmark where newer LLVM ends up inling a function 5 times in a way that ends up just causing harm. If you encounter this in your own projects, you can selectively build certain source files with &lt;code&gt;-Os&lt;/code&gt; to focus on code size, use &lt;code&gt;__attribute__((noinline))&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There may be more issues we are not aware of that should be optimized ‚Äî please let us know if you find anything!&lt;/p&gt;
&lt;h2 id=&quot;other-changes&quot;&gt;Other changes &lt;a class=&quot;bookmark&quot; href=&quot;#other-changes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a small number of Emscripten features that are tied to fastcomp and/or to asm.js, which means that they can‚Äôt work out of the box with the WebAssembly backend, and so we have been working on alternatives.&lt;/p&gt;
&lt;h3 id=&quot;javascript-output&quot;&gt;JavaScript output &lt;a class=&quot;bookmark&quot; href=&quot;#javascript-output&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An option for non-WebAssembly output is still important in some cases ‚Äî although all major browsers have had WebAssembly support for some time, there is still a long tail of old machines, old phones, etc. that don‚Äôt have WebAssembly support. Also, as WebAssembly adds new features some form of this issue will stay relevant. Compiling to JS is a way to guarantee you can reach everyone, even if the build isn‚Äôt as small or fast as WebAssembly would be. With fastcomp we simply used the asm.js output for this directly, but with the WebAssembly backend obviously something else is needed. We are using Binaryen‚Äôs &lt;a href=&quot;https://github.com/WebAssembly/binaryen#wasm2js&quot;&gt;&lt;code&gt;wasm2js&lt;/code&gt;&lt;/a&gt; for that purpose, which as the name suggests compiles WebAssembly to JS.&lt;/p&gt;
&lt;p&gt;This probably warrants a full blog post, but in brief, a key design decision here is that there is no point to supporting asm.js anymore. asm.js can run much faster than general JS, but it turns out that practically all browsers that support asm.js AOT optimizations also support WebAssembly anyhow (in fact, Chrome optimizes asm.js by converting it to WebAssembly internally!). So when we talk about a JS fallback option, it may as well not use asm.js; in fact it‚Äôs simpler, allows us to support more features in WebAssembly, and also results in significantly smaller JS as well! Therefore &lt;code&gt;wasm2js&lt;/code&gt; does not target asm.js.&lt;/p&gt;
&lt;p&gt;However, a side effect of that design is that if you test an asm.js build from fastcomp compared to a JS build with the WebAssembly backend then the asm.js may be much faster ‚Äî if you test in a modern browser with asm.js AOT optimizations. That is probably the case for your own browser, but not the browsers that would actually need the non-WebAssembly option! For a proper comparison, you should use a browser without asm.js optimizations or with them disabled. If the &lt;code&gt;wasm2js&lt;/code&gt; output is still slower, please let us know!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wasm2js&lt;/code&gt; is missing some less-used features like dynamic linking and pthreads, but most code should work already, and it‚Äôs been carefully fuzzed. To test the JS output, simply build with &lt;code&gt;-s WASM=0&lt;/code&gt; to disable WebAssembly. &lt;code&gt;emcc&lt;/code&gt; then runs &lt;code&gt;wasm2js&lt;/code&gt; for you, and if this is an optimized build it runs various useful optimizations as well.&lt;/p&gt;
&lt;h3 id=&quot;other-things-you-may-notice&quot;&gt;Other things you may notice &lt;a class=&quot;bookmark&quot; href=&quot;#other-things-you-may-notice&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https://github.com/emscripten-core/emscripten/wiki/Asyncify&quot;&gt;Asyncify&lt;/a&gt; and &lt;a href=&quot;https://github.com/emscripten-core/emscripten/wiki/Emterpreter&quot;&gt;Emterpreter&lt;/a&gt; options only work in fastcomp. A replacement &lt;a href=&quot;https://github.com/WebAssembly/binaryen/pull/2172&quot;&gt;is&lt;/a&gt; &lt;a href=&quot;https://github.com/WebAssembly/binaryen/pull/2173&quot;&gt;being&lt;/a&gt; &lt;a href=&quot;https://github.com/emscripten-core/emscripten/pull/8808&quot;&gt;worked&lt;/a&gt; &lt;a href=&quot;https://github.com/emscripten-core/emscripten/issues/8561&quot;&gt;on&lt;/a&gt;. We expect this to eventually be an improvement on the previous options.&lt;/li&gt;
&lt;li&gt;Pre-built libraries must be rebuilt: if you have some &lt;code&gt;library.bc&lt;/code&gt; that was built with fastcomp, then you‚Äôll need to rebuild it from source using newer Emscripten. This has always been the case when fastcomp upgraded LLVM to a new version which changed the bitcode format, and the change now (to WebAssembly object files instead of bitcode) has the same effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our main goal right now is to fix any bugs related to this change. Please test and file issues!&lt;/p&gt;
&lt;p&gt;After things are stable, we‚Äôll switch the default compiler backend to the upstream WebAssembly backend. Fastcomp will remain an option, as mentioned earlier.&lt;/p&gt;
&lt;p&gt;We would like to eventually remove fastcomp entirely. Doing so would remove a significant maintenance burden, allow us to focus more on new features in the WebAssembly backend, accelerate general improvements in Emscripten, and other good things. Please let us know how testing goes on your codebases so we can start to plan a timeline for fastcomp‚Äôs removal.&lt;/p&gt;
&lt;h3 id=&quot;thank-you&quot;&gt;Thank you &lt;a class=&quot;bookmark&quot; href=&quot;#thank-you&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Thanks to everyone involved in the development of the LLVM WebAssembly backend, &lt;code&gt;wasm-ld&lt;/code&gt;, Binaryen, Emscripten, and the other things mentioned in this post! A partial list of those awesome people is: aardappel, aheejin, alexcrichton, dschuff, jfbastien, jgravelle, nwilson, sbc100, sunfish, tlively, yurydelendik.&lt;/p&gt;
</content></entry><entry><title>JavaScript ÁöÑÊÄßËÉΩÂºÄÈîÄ(2019Áâà)</title><link href="https://v8.js.cn/blog/cost-of-javascript-2019/"/><updated>2019-06-25T00:00:00+00:00</updated><id>https://v8.js.cn/blog/cost-of-javascript-2019/</id><author><name>Addy Osmani (@addyosmani), JavaScript Janitor</name></author><content type="html">&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Ê≥®&lt;/strong&gt;ÔºöÂ¶ÇÊûúÊÇ®Êõ¥ÂñúÊ¨¢ËßÇÁúãÊºîÁ§∫ÊñáÁ®øÔºåËØ∑Ê¨£Ëµè‰∏ãÈù¢ÁöÑËßÜÈ¢ëÔºÅÂ¶ÇÊûúÊ≤°ÊúâÔºåËØ∑Ë∑≥ËøáËßÜÈ¢ëÂπ∂ÁªßÁª≠ÈòÖËØª„ÄÇ&lt;/p&gt;
&lt;/div&gt;
&lt;figure&gt;
  &lt;div class=&quot;video video-16:9&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/X9eRLElSW1c&quot; allow=&quot;picture-in-picture&quot; allowfullscreen=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=X9eRLElSW1c&quot;&gt;‚ÄúThe cost of JavaScript‚Äù&lt;/a&gt; as presented by Addy Osmani at #PerfMatters Conference 2019.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ËøáÂéªÂá†Âπ¥‰∏≠Ôºå&lt;a href=&quot;https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4&quot;&gt;JavaScript ÊÄßËÉΩ&lt;/a&gt;ÁöÑÂ§ßÂπÖÊîπËøõÂæàÂ§ßÁ®ãÂ∫¶‰∏ä‰æùËµñ‰∫éÊµèËßàÂô®Ëß£ÊûêÂíåÁºñËØë JavaScript ÁöÑÈÄüÂ∫¶„ÄÇ&lt;strong&gt;Âú® 2019 Âπ¥ÔºåÂ§ÑÁêÜ JavaScript ÁöÑ‰∏ªË¶ÅÊÄßËÉΩÊçüËÄóÂú®‰∫é‰∏ãËΩΩÂíå CPU ÊâßË°åÊó∂Èó¥&lt;/strong&gt;„ÄÇ&lt;/p&gt;
&lt;p&gt;ÊµèËßàÂô®‰∏ªÁ∫øÁ®ãÂøô‰∫éÊâßË°å JavaScript Êó∂ÔºåÁî®Êà∑‰∫§‰∫í‰ºöË¢´Âª∂ËøüÔºåÂõ†Ê≠§ËÑöÊú¨ÊâßË°åÊó∂Èó¥ÂíåÁΩëÁªú‰∏äÁöÑÁì∂È¢à‰ºòÂåñÂ∞§ÂÖ∂ÈáçË¶Å„ÄÇ&lt;/p&gt;
&lt;h2 id=&quot;guidance&quot;&gt;ÂèØË°åÁöÑÈ´òÁ∫ßÊåáÂçó &lt;a class=&quot;bookmark&quot; href=&quot;#guidance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ËøôÂØπ‰∫é web ÂºÄÂèëËÄÖÊÑèÂë≥ÁùÄ‰ªÄ‰πàÔºüËß£ÊûêÂíåÁºñËØëÁöÑÊÄßËÉΩÊçüËÄó&lt;strong&gt;‰∏çÂÜçÂÉè‰ªéÂâçÊàë‰ª¨ËÆ§‰∏∫ÁöÑÈÇ£Ê†∑ÊÖ¢&lt;/strong&gt;„ÄÇÊàë‰ª¨ÈúÄË¶ÅÂÖ≥Ê≥®‰∏âÁÇπÔºö&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ÊèêÂçá‰∏ãËΩΩÈÄüÂ∫¶&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;ÂáèÂ∞è JavaScript ÂåÖÁöÑ‰ΩìÁßØÔºåÂ∞§ÂÖ∂ÊòØÂú®ÁßªÂä®ËÆæÂ§á‰∏ä„ÄÇÊõ¥Â∞èÁöÑÂåÖÂèØ‰ª•ÊèêÂçá‰∏ãËΩΩÈÄüÂ∫¶ÔºåÂ∏¶Êù•Êõ¥‰ΩéÁöÑÂÜÖÂ≠òÂç†Áî®ÔºåÂπ∂ÂáèÂ∞ë CPU ÊÄßËÉΩÊçüËÄó„ÄÇ&lt;/li&gt;
&lt;li&gt;ÈÅøÂÖçÊää‰ª£Á†ÅÊâìÂåÖÊàê‰∏Ä‰∏™Â§ßÊñá‰ª∂„ÄÇÂ¶ÇÊûú‰∏Ä‰∏™ÂåÖË∂ÖËøá 50‚Äì100 kBÔºåÊääÂÆÉÂàÜÂâ≤ÊàêÂ§ö‰∏™Êõ¥Â∞èÁöÑÂåÖ„ÄÇÔºàÁî±‰∫é HTTP/2 ÁöÑÂ§öË∑ØÂ§çÁî®ÁâπÊÄßÔºåÂ§ö‰∏™ËØ∑Ê±ÇÂíåÂìçÂ∫îÂèØ‰ª•ÂêåÊó∂Âà∞ËææÔºå‰ªéËÄåÂáèÂ∞ëÈ¢ùÂ§ñËØ∑Ê±ÇÁöÑË¥üËΩΩ„ÄÇÔºâ&lt;/li&gt;
&lt;li&gt;Áî±‰∫éÁßªÂä®ËÆæÂ§á‰∏äÁöÑÁΩëÁªúÈÄüÂ∫¶Ôºå‰Ω†Â∫îËØ•ÂáèÂ∞ëÁΩëÁªú‰º†ËæìÔºåËÄå‰∏î‰πüÈúÄË¶ÅÁª¥ÊåÅÊõ¥‰ΩéÁöÑÂÜÖÂ≠ò‰ΩøÁî®„ÄÇ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ÊèêÂçáÊâßË°åÈÄüÂ∫¶&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;ÈÅøÂÖç‰Ωø‰∏ªÁ∫øÁ®ãÂøôÁ¢åÁöÑ&lt;a href=&quot;https://w3c.github.io/longtasks/&quot;&gt;Èïø‰ªªÂä°(Long Tasks)&lt;/a&gt;Ôºå‰ΩøÈ°µÈù¢Âø´ÁÇπËøõË°åÂèØ‰∫§‰∫íÊÄÅ„ÄÇËÑöÊú¨ÊâßË°åÊó∂Èó¥ÁõÆÂâçÊàê‰∏∫‰∫Ü‰∏Ä‰∏™‰∏ªË¶ÅÁöÑÊÄßËÉΩÊçüËÄó„ÄÇ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ÈÅøÂÖçÂ§ßÂûãÂÜÖËÅîËÑö&lt;/strong&gt; Âõ†‰∏∫ÂÆÉ‰ª¨‰πü‰ºöÂú®‰∏ªÁ∫øÁ®ã‰∏≠Ëß£ÊûêÂíåÁºñËØëÔºâ„ÄÇ‰∏Ä‰∏™‰∏çÈîôÁöÑËßÑÂÆöÊòØÔºöÂ¶ÇÊûúËÑöÊú¨Ë∂ÖËøá 1KBÔºåÂ∞±‰∏çË¶ÅÂ∞ÜÂÖ∂ÂÜÖËÅîÔºàÂ§ñÈÉ®ËÑöÊú¨ÁöÑ&lt;a href=&quot;https://v8.js.cn/blog/code-caching-for-devs&quot;&gt;Â≠óËäÇÁ†ÅÁºìÂ≠ò&lt;/a&gt;Ë¶ÅÊ±ÇÊúÄÂ∞è‰∏∫ 1KB ‰πüÊòØ‰∏Ä‰∏™ÂéüÂõ†Ôºâ„ÄÇ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;download-execute&quot;&gt;‰∏∫‰Ωï‰ºòÂåñ‰∏ãËΩΩÂíåÊâßË°åÊó∂Èó¥ÂæàÈáçË¶ÅÔºü &lt;a class=&quot;bookmark&quot; href=&quot;#download-execute&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;‰∏∫‰Ωï‰ºòÂåñ‰∏ãËΩΩÂíåÊâßË°åÊó∂Èó¥ÂæàÈáçË¶ÅÔºü‰∏ãËΩΩÊó∂Èó¥Âú®‰ΩéÁ´ØÁΩëÁªúÁéØÂ¢É‰∏ãÂæàÂÖ≥ÈîÆ„ÄÇÂ∞ΩÁÆ° 4GÔºàÁîöËá≥ 5GÔºâÂú®ÂÖ®ÁêÉËåÉÂõ¥Âø´ÈÄüÂèëÂ±ïÔºåÊàë‰ª¨&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType&quot;&gt;ÂÆûÈôÖÊÑüÂèóÂà∞ÁöÑÁΩëÁªúÈÄüÂ∫¶&lt;/a&gt;ÂíåÂÆ£‰º†Âπ∂‰∏ç‰∏ÄËá¥ÔºåÂæàÂ§öÊó∂ÂÄôÊÑüËßâÂ∞±ÂÉè 3GÔºàÁîöËá≥Êõ¥Â∑ÆÔºâ„ÄÇ&lt;/p&gt;
&lt;p&gt;JavaScript ÊâßË°åÊó∂Èó¥Âú®‰ΩøÁî®‰ΩéÁ´Ø CPU ÁöÑÊâãÊú∫‰∏äÂæàÈáçË¶Å„ÄÇÁî±‰∫é CPU„ÄÅGPU ÂíåÊï£ÁÉ≠‰∏äÁöÑÂ∑ÆÂºÇÔºå‰∏çÂêåÊâãÊú∫‰∏äÊÄßËÉΩÂ∑ÆÂºÇÈùûÂ∏∏Â§ß„ÄÇËøô‰ºöÂΩ±ÂìçÂà∞ JavaScript ÁöÑÊÄßËÉΩÔºåÂõ†‰∏∫ JavaScript ÁöÑÊâßË°åÊòØ CPU ÂØÜÈõÜÂûã‰ªªÂä°„ÄÇ&lt;/p&gt;
&lt;p&gt;ÂÆûÈôÖ‰∏äÔºåÂÉè Chrome ËøôÊ†∑ÁöÑÊµèËßàÂô®‰∏äÁöÑÈ°µÈù¢Âä†ËΩΩÊÄªÊó∂Èó¥ÔºåÊúâÂ§öËææ 30% ÁöÑÊó∂Èó¥Ëä±Âú® JavaScript ÊâßË°å‰∏ä„ÄÇ‰∏ãÈù¢ÊòØ‰∏Ä‰∏™‰ªªÂä°Ë¥üËΩΩÔºàReddit.comÔºâÂæàÂÖ∏ÂûãÁöÑÁΩëÁ´ôÂú®È´òÁ´ØÊ°åÈù¢ËÆæÂ§á‰∏äÁöÑÈ°µÈù¢Âä†ËΩΩÔºå&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/reddit-js-processing.svg&quot; width=&quot;1280&quot; height=&quot;774&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;V8 ‰∏≠ÁöÑ JavaScript Â§ÑÁêÜÂç†Áî®‰∫ÜÈ°µÈù¢Âä†ËΩΩÊó∂Èó¥ÁöÑ 10-30%„ÄÇ&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ÁßªÂä®ËÆæÂ§á‰∏äÔºå‰∏≠Á´ØÊú∫ÔºàMoto G4ÔºâÁöÑ JavaScript ÊâßË°åÊó∂Èó¥ÊòØÈ´òÁ´ØÊú∫ÔºàPixel 3ÔºâÁöÑ 3 Âà∞ 4 ÂÄçÔºå‰ΩéÁ´ØÊú∫Ôºà‰∏çÂà∞ 100 ÂàÄÁöÑ Alcatel 1XÔºâ‰∏äÊúâË∂ÖËøá 6 ÂÄçÁöÑÊÄßËÉΩÂ∑ÆÂºÇÔºö&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/reddit-js-processing-devices.svg&quot; width=&quot;1280&quot; height=&quot;774&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Reddit Âú®‰∏çÂêåËÆæÂ§áÁ±ªÂûã‰∏äÔºà‰ΩéÁ´Ø„ÄÅ‰∏≠Á´ØÂíåÈ´òÁ´ØÔºâÁöÑ JavaScript ÊÄßËÉΩÊçüËÄó&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Ê≥®ÊÑèÔºö&lt;/strong&gt; Reddit Âú®Ê°åÈù¢Á´ØÂíåÁßªÂä®Á´ØÁöÑ‰ΩìÈ™åÂÆåÂÖ®‰∏çÂêåÔºåÂõ†Ê≠§ MacBook Pro ‰∏äÁöÑÁªìÊûúÂπ∂‰∏çËÉΩÂíåÂÖ∂‰ªñËÆæÂ§á‰∏äÁöÑÁªìÊûúÁõ¥Êé•ÂÅöÊØîËæÉ„ÄÇ&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;ÂΩì‰Ω†Â∞ùËØï‰ºòÂåñ JavaScript ÊâßË°åÊó∂Èó¥ÔºåÊ≥®ÊÑèÂÖ≥Ê≥®&lt;a href=&quot;https://web.dev/long-tasks-devtools/&quot;&gt;Èïø‰ªªÂä°&lt;/a&gt;ÔºåÂÆÉÂèØËÉΩÈïøÊúüÁã¨Âç† UI Á∫øÁ®ã„ÄÇËøô‰∫õ‰ªªÂä°‰ºöÈòªÂ°ûÊâßË°åÂÖ≥ÈîÆ‰ªªÂä°ÔºåÂç≥‰æøÈ°µÈù¢ÁúãËµ∑Êù•Â∑≤ÁªèÂä†ËΩΩÂÆåÊàê„ÄÇÊääÈïø‰ªªÂä°ÊãÜÂàÜÊàêÂ§ö‰∏™Â∞è‰ªªÂä°„ÄÇÈÄöËøá‰ª£Á†ÅÂàÜÂâ≤ÂíåÊåáÂÆöÂä†ËΩΩ‰ºòÂÖàÁ∫ßÔºåÂèØ‰ª•ÊèêÂçáÈ°µÈù¢ÂèØ‰∫§‰∫íÈÄüÂ∫¶ÔºåÂπ∂‰∏îÊúâÂ∏åÊúõÈôç‰ΩéËæìÂÖ•Âª∂Ëøü„ÄÇ&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/long-tasks.png&quot; srcset=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/long-tasks@2x.png 2x&quot; width=&quot;1280&quot; height=&quot;774&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Èïø‰ªªÂä°Áã¨Âç†‰∏ªÁ∫øÁ®ãÔºåÂ∫îËØ•ÊãÜÂàÜÂÆÉ‰ª¨„ÄÇ&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;v8-improvements&quot;&gt;V8 Âú®ÊèêÂçáËß£ÊûêÁºñËØëÈÄüÂ∫¶‰∏äÂÅö‰∫Ü‰ªÄ‰πàÔºü &lt;a class=&quot;bookmark&quot; href=&quot;#v8-improvements&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Chrome 60+ ‰∏äÔºåV8 ÂØπ‰∫éÂàùÂßã JavaScript ÁöÑËß£ÊûêÈÄüÂ∫¶ÊèêÂçá‰∫Ü 2 ÂÄç„ÄÇ‰∏éÊ≠§ÂêåÊó∂Ôºå Áî±‰∫é Chrome ‰∏äÁöÑÂÖ∂‰ªñÂπ∂Ë°å‰ºòÂåñÔºåÂàùÂßãËß£ÊûêÂíåÁºñËØëÁöÑÊÄßËÉΩÊçüËÄóÊõ¥Â∞ë‰∫Ü„ÄÇ&lt;/p&gt;
&lt;p&gt;V8 ÂáèÂ∞ë‰∫Ü‰∏ªÁ∫øÁ®ã‰∏äÁöÑËß£ÊûêÁºñËØë‰ªªÂä°ÔºåÂπ≥ÂùáÂáèÂ∞ë‰∫Ü 40%ÔºàÊØîÂ¶Ç Facebook ‰∏äÊòØ 46%ÔºåPinterest ‰∏äÊòØ 62%Ôºâ,ÊúÄÈ´òÂáèÂ∞ë‰∫Ü 81%ÔºàYouTubeÔºâÔºåËøôÂæóÁõä‰∫éÂ∞ÜËß£ÊûêÁºñËØë‰ªªÂä°Êê¨Âà∞‰∫Ü worker Á∫øÁ®ã‰∏ä„ÄÇËøôÂØπ‰∫éÊµÅÂºèËß£Êûê/ÁºñËØëÊòØ‰∏Ä‰∏™Ë°•ÂÖÖ„ÄÇ&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/chrome-js-parse-times.svg&quot; width=&quot;1280&quot; height=&quot;836&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;‰∏çÂêå V8 ÁâàÊú¨‰∏äÁöÑËß£ÊûêÊó∂Èó¥&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;‰∏ãÂõæÂΩ¢Ë±°ÂëàÁé∞‰∫Ü‰∏çÂêå Chrome V8 ÁâàÊú¨‰∏ä CPU Ëß£ÊûêÊó∂Èó¥„ÄÇChrome 61 Ëß£Êûê Facebook ÁöÑ JS Ëä±‰∫ÜÁõ∏ÂêåÁöÑÊó∂Èó¥ÔºåChrome 75 Áé∞Âú®Ëß£Êûê Facebook ÁöÑÊó∂Èó¥ÊòØ Twitter ÁöÑ 6 ÂÄç„ÄÇ&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/js-parse-times-websites.svg&quot; width=&quot;1280&quot; height=&quot;774&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Chrome 61 Ëß£Êûê Facebook ÁöÑ JS Êó∂Èó¥ÔºåChrome 75 ÂèØ‰ª•ÂêåÊó∂Ëß£Êûê Facebook Âíå 6Ê¨° Twitter ÁöÑ JS„ÄÇ&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Êàë‰ª¨Êù•Á†îÁ©∂‰∏ãËøô‰∫õÈáäÊîæÂá∫Êù•ÁöÑÊîπÂèò„ÄÇÈïøËØùÁü≠ËØ¥ÔºåÊµÅÂºèËß£ÊûêÂíå worker Á∫øÁ®ãÁºñËØëËÑöÊú¨ÔºåËøôÊÑèÂë≥ÁùÄÔºö&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;V8 ÂèØ‰ª•Ëß£ÊûêÁºñËØë JavaScript Êó∂‰∏çÈòªÂ°û‰∏ªÁ∫øÁ®ã„ÄÇ&lt;/li&gt;
&lt;li&gt;ÊµÅÂºèËß£ÊûêÂßã‰∫éÊï¥‰∏™ HTML Ëß£ÊûêÂô®ÈÅáÂà∞ &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; Ê†áÁ≠æ„ÄÇÂØπ‰∫éÈòªÂ°ûËß£ÊûêÁöÑËÑöÊú¨ÔºåHTML Ëß£ÊûêÂô®‰ºöÊöÇÂÅúÔºåËÄåÂºÇÊ≠•ËÑöÊú¨‰ºöÁªßÁª≠ÊâßË°å„ÄÇ&lt;/li&gt;
&lt;li&gt;ÂØπ‰∫éÂ§ßÂ§öÊï∞ÁúüÂÆû‰∏ñÁïåÁöÑÁΩëÁªúËøûÊé•ÈÄüÂ∫¶ÔºåV8 Ëß£ÊûêÊØî‰∏ãËΩΩÂø´ÔºåÂõ†Ê≠§ V8 Âú®ËÑöÊú¨‰∏ãËΩΩÂÆåÂêéÂæàÂø´Â∞±ÂÆåÊàê‰∫ÜËß£ÊûêÁºñËØë„ÄÇ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Á®çÂæÆËß£Èáä‰∏ã...ÂæàËÄÅÁöÑ Chrome ‰∏ä‰ºöÂú®ÂÆåÊï¥‰∏ãËΩΩÂÆåËÑöÊú¨ÂêéÊâçÂºÄÂßãËß£ÊûêÔºåËøôÂæàÁõ¥Êé•‰ΩÜÂπ∂Ê≤°ÊúâÂÆåÂÖ®Âà©Áî®Â•Ω CPU„ÄÇChrome 41 Âíå 68 ‰πãÈó¥ÁöÑÁâàÊú¨‰∏äÔºåChrome Âú®‰∏ãËΩΩ‰∏ÄÂºÄÂßãÂ∞±Âú®‰∏Ä‰∏™Áã¨Á´ãÁ∫øÁ®ã‰∏äËß£Êûê async Âíå defer ÁöÑËÑöÊú¨„ÄÇ&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/script-streaming-1.svg&quot; width=&quot;1280&quot; height=&quot;774&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;È°µÈù¢‰∏äÁöÑËÑöÊú¨Ë¢´ÂàÜÂâ≤ÊàêÂ§ö‰∏™Âùó„ÄÇÂè™Ë¶Å‰ª£Á†ÅÂùóË∂ÖËøá 30KBÔºåV8 Â∞±‰ºöÂºÄÂßãÊµÅÂºèËß£Êûê„ÄÇ&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Chrome 71 ‰∏äÔºåÊàë‰ª¨ÂºÄÂßãÂÅö‰∏Ä‰∏™Âü∫‰∫é‰ªªÂä°ÁöÑË∞ÉÊï¥ÔºåË∞ÉÂ∫¶Âô®ÂèØ‰ª•‰∏ÄÊ¨°Ëß£ÊûêÂ§ö‰∏™ async/defer ËÑöÊú¨„ÄÇËøô‰∏ÄÊîπÂèòÁöÑÂΩ±ÂìçÊòØÔºå‰∏ªÁ∫øÁ®ãËß£ÊûêÊó∂Èó¥ÂáèÂ∞ë 20%ÔºåÂú®ÁúüÂÆûÁΩëÁ´ô‰∏äÔºåÂ∏¶Êù•Ë∂ÖËøá 2% ÁöÑ TTI/FID ÊèêÂçá„ÄÇ&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ËØëËÄÖÊ≥®ÔºöFID(First Input Delay)ÔºåÁ¨¨‰∏ÄËæìÂÖ•Âª∂ËøüÔºàFIDÔºâÊµãÈáèÁî®Êà∑È¶ñÊ¨°‰∏éÊÇ®ÁöÑÁ´ôÁÇπ‰∫§‰∫íÊó∂ÁöÑÊó∂Èó¥ÔºàÂç≥ÔºåÂΩì‰ªñ‰ª¨ÂçïÂáªÈìæÊé•ÔºåÁÇπÂáªÊåâÈíÆÊàñ‰ΩøÁî®Ëá™ÂÆö‰πâÁöÑ JavaScript È©±Âä®Êéß‰ª∂Êó∂ÔºâÂà∞ÊµèËßàÂô®ÂÆûÈôÖËÉΩÂ§üÁöÑÊó∂Èó¥ÂõûÂ∫îËøôÁßç‰∫íÂä®„ÄÇ‰∫§‰∫íÊó∂Èó¥ÔºàTTIÔºâÊòØË°°ÈáèÂ∫îÁî®Âä†ËΩΩÊâÄÈúÄÊó∂Èó¥Âπ∂ËÉΩÂ§üÂø´ÈÄüÂìçÂ∫îÁî®Êà∑‰∫§‰∫íÁöÑÊåáÊ†á„ÄÇ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/script-streaming-2.svg&quot; width=&quot;1280&quot; height=&quot;774&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Chrome 71 moved to a task-based setup where the scheduler could parse multiple async/deferred scripts at once.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Chrome 72 ‰∏äÔºåÊàë‰ª¨ËΩ¨Âêë‰ΩøÁî®ÊµÅÂºèËß£Êûê‰Ωú‰∏∫‰∏ªË¶ÅËß£ÊûêÊñπÂºèÔºöÁé∞Âú®‰∏ÄËà¨ÂºÇÊ≠•ÁöÑËÑöÊú¨ÈÉΩ‰ª•ËøôÁßçÊñπÂºèËß£ÊûêÔºàÂÜÖËÅîËÑöÊú¨Èô§Â§ñÔºâ„ÄÇÊàë‰ª¨‰πüÂÅúÊ≠¢‰∫ÜÂ∫üÈô§Âü∫‰∫é‰ªªÂä°ÁöÑËß£ÊûêÔºåÂ¶ÇÊûú‰∏ªÁ∫øÁ®ãÈúÄË¶ÅÁöÑËØùÔºåÂõ†‰∏∫ÈÇ£Ê†∑Âè™ÊòØÂú®ÂÅö‰∏çÂøÖË¶ÅÁöÑÈáçÂ§çÂ∑•‰Ωú„ÄÇ&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://v8.js.cn/blog/v8-release-75#script-streaming-directly-from-network&quot;&gt;Êó©ÊúüÁâàÊú¨ÁöÑ Chrome&lt;/a&gt; ÊîØÊåÅÊµÅÂºèËß£ÊûêÂíåÁºñËØëÔºåÊù•Ëá™ÁΩëÁªúÁöÑËÑöÊú¨Ê∫êÊï∞ÊçÆÂøÖÈ°ªÂÖàÂà∞Ëææ Chrome ÁöÑ‰∏ªÁ∫øÁ®ãÔºåÁÑ∂ÂêéÊâç‰ºöËΩ¨ÂèëÁªôÊµÅÂ§ÑÁêÜÂô®„ÄÇ&lt;/p&gt;
&lt;p&gt;ËøôÂ∏∏‰ºöÈÄ†ÊàêÊµÅÂºèËß£ÊûêÂô®Á≠âÂæÖÊó©Â∑≤‰∏ãËΩΩÂÆåÊàê‰ΩÜËøòÊ≤°ÊúâË¢´ËΩ¨ÂèëÂà∞ÊµÅ‰ªªÂä°ÁöÑÊï∞ÊçÆÔºåÂõ†‰∏∫ÂÆÉË¢´‰∏ªÁ∫øÁ®ã‰∏äÁöÑÂÖ∂‰ªñ‰ªªÂä°ÔºàÊØîÂ¶Ç HTML Ëß£ÊûêÔºåÂ∏ÉÂ±ÄÊàñËÄÖ JavaScript ÊâßË°åÔºâÊâÄÈòªÂ°û„ÄÇ&lt;/p&gt;
&lt;p&gt;Êàë‰ª¨Áé∞Âú®Ê≠£Âú®Â∞ùËØïÂºÄÂßãÂØπÈ¢ÑÂä†ËΩΩËøõË°åËß£ÊûêÔºåËÄå‰∏ªÁ∫øÁ®ãÂºπË∑≥‰ºö‰∫ãÂÖàÂØπÊ≠§ÂΩ¢ÊàêÈòªÂ°û„ÄÇ&lt;/p&gt;
&lt;p&gt;Leszek Swirski ÁöÑ BlinkOn ÊºîÁ§∫ÂëàÁé∞‰∫ÜÊõ¥Â§öÁªÜËäÇÔºö&lt;/p&gt;
&lt;figure&gt;
  &lt;div class=&quot;video video-16:9&quot;&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/D1UJgiG4_NI&quot; allow=&quot;picture-in-picture&quot; allowfullscreen=&quot;&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=D1UJgiG4_NI&quot;&gt;‚ÄúParsing JavaScript in zero* time‚Äù&lt;/a&gt; as presented by Leszek Swirski at BlinkOn 10.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;how-do-these-changes-reflect-what-you-see-in-devtools%3F&quot;&gt;DevTools ‰∏äÂ¶Ç‰ΩïÊü•ÁúãËøô‰∫õÊîπÂèòÔºü &lt;a class=&quot;bookmark&quot; href=&quot;#how-do-these-changes-reflect-what-you-see-in-devtools%3F&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Èô§‰∫Ü‰∏äËø∞‰πãÂ§ñÔºå&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=939275&quot;&gt;DevTools Êúâ‰∏™ÈóÆÈ¢ò&lt;/a&gt;ÔºåÂÆÉÊöó‰∏≠‰ΩøÁî®‰∫Ü CPUÔºåËøô‰ºöÂΩ±ÂìçÂà∞Êï¥‰∏™Ëß£Êûê‰ªªÂä°ÁöÑÂëàÁé∞„ÄÇÁÑ∂ËÄåÔºåËß£ÊûêÂô®Ëß£ÊûêÊï∞ÊçÆÊó∂Â∞±‰ºöÈòªÂ°ûÔºàÂÆÉÈúÄË¶ÅÂú®‰∏ªÁ∫øÁ®ã‰∏äËøêË°åÔºâ„ÄÇËá™‰ªéÊàë‰ª¨‰ªé‰∏Ä‰∏™Âçï‰∏ÄÁöÑÊµÅÂ§ÑÁêÜÁ∫øÁ®ã‰∏≠ÁßªÂä®Âà∞ÊµÅ‰ªªÂä°‰∏≠ÔºåËøô‰∏ÄÁÇπÂ∞±ÂèòÊàêÊõ¥‰∏∫ÊòéÊòæ‰∫Ü„ÄÇ‰∏ãÈù¢ÊòØ‰Ω†Âú® Chrome 69 ‰∏≠ÁªèÂ∏∏‰ºöÁúãÂà∞ÁöÑÔºö&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/devtools-69.png&quot; srcset=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/devtools-69@2x.png 2x&quot; width=&quot;931&quot; height=&quot;98&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;The DevTools issue that rendered the entire parser task in a way that hints that it‚Äôs using CPU (full block)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;‰∏äÂõæ‰∏≠ÁöÑ‚ÄúËß£ÊûêËÑöÊú¨‚Äù‰ªªÂä°Ëä±‰∫Ü 1.08 Áßí„ÄÇËÄåËß£Êûê JavaScript ÂÖ∂ÂÆûÂπ∂‰∏çÊÖ¢ÔºÅÂ§öÊï∞Êó∂Èó¥ÈáåÈô§‰∫ÜÁ≠âÂæÖÊï∞ÊçÆÈÄöËøá‰∏ªÁ∫øÁ®ã‰πãÂ§ñ‰ªÄ‰πàÈÉΩ‰∏çÂÅö„ÄÇ&lt;/p&gt;
&lt;p&gt;Chrome 76 ÁöÑË°®Áé∞Â§ß‰∏çÁõ∏ÂêåÔºö&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/devtools-76.png&quot; srcset=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/devtools-76@2x.png 2x&quot; width=&quot;922&quot; height=&quot;441&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Chrome 76 ‰∏äÔºåËß£ÊûêËÑöÊú¨Ë¢´ÊãÜÂàÜÊàêÂ§ö‰∏™Êõ¥Â∞èÁöÑÊµÅÂºè‰ªªÂä°„ÄÇ&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ÈÄöÂ∏∏ÔºåDevTools ÊÄßËÉΩÈù¢ÊùøÂæàÈÄÇÂêàÁî®Êù•Êü•ÁúãÈ°µÈù¢‰∏äÂèëÁîüÁöÑË°å‰∏∫„ÄÇÂØπ‰∫éÊõ¥ËØ¶ÁªÜÁöÑ V8 ÁâπÂÆöÊåáÊ†áÔºåÊØîÂ¶Ç JavaScript Ëß£ÊûêÁºñËØëÊó∂Èó¥ÔºåÊàë‰ª¨Êé®Ëçê&lt;a href=&quot;https://v8.js.cn/docs/rcs&quot;&gt;‰ΩøÁî®Â∏¶ÊúâËøêË°åÊó∂Ë∞ÉÁî®ÁªüËÆ°(RCS)ÁöÑ Chrome Tracing&lt;/a&gt;„ÄÇRCS ÁªìÊûú‰∏≠Ôºå&lt;code&gt;Parse-Background&lt;/code&gt; Âíå &lt;code&gt;Compile-Background&lt;/code&gt; ‰ª£Ë°®‰∏ªÁ∫øÁ®ã‰πãÂ§ñËß£ÊûêÂíåÁºñËØë JavaScript Ëä±Ë¥πÁöÑÊó∂Èó¥ÔºåÁÑ∂ËÄå &lt;code&gt;Parse&lt;/code&gt; Âíå &lt;code&gt;Compile&lt;/code&gt; ËÆ∞ÂΩï‰∫Ü‰∏ªÁ∫øÁ®ãÁöÑÊåáÊ†á„ÄÇ&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/rcs.png&quot; srcset=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/rcs@2x.png 2x&quot; width=&quot;848&quot; height=&quot;526&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;impact&quot;&gt;Ëøô‰∫õÊîπÂèòÁöÑÁúüÂÆûÂΩ±ÂìçÔºü &lt;a class=&quot;bookmark&quot; href=&quot;#impact&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Êù•Áúã‰∏Ä‰∫õÁúüÂÆûÁΩëÁ´ôÁöÑ‰æãÂ≠êÂíåËÑöÊú¨ÊµÅÂºèËß£ÊûêÂ¶Ç‰ΩïÂ∫îÁî®„ÄÇ&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/reddit-main-thread.svg&quot; width=&quot;1280&quot; height=&quot;774&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Âú® MacBook Pro ‰∏äÔºå‰∏ªÁ∫øÁ®ãÂíå workder Á∫øÁ®ãËß£ÊûêÁºñËØë Reddit ÁöÑ JS ÊâÄËä±ÁöÑÊó∂Èó¥„ÄÇ&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Reddit.com ÊúâÂ§ö‰∏™ 100 KB+ ÁöÑ‰ª£Á†ÅÂåÖÔºåËøô‰∫õÂåÖË¢´ÂåÖË£ÖÂú®ÂºïËµ∑‰∏ªÁ∫øÁ®ãÂ§ßÈáè&lt;a href=&quot;https://v8.js.cn/blog/preparser&quot;&gt;ÊáíÁºñËØë&lt;/a&gt;ÁöÑÂ§ñÈÉ®ÂáΩÊï∞‰∏≠„ÄÇÂú®‰∏äÂõæ‰∏≠ÔºåÁî±‰∫é‰∏ªÁ∫øÁ®ãÂøôÁ¢å‰ºöÂª∂ËøüÂèØ‰∫§‰∫íÊó∂Èó¥ÔºåÂÖ∂ËøêË°åÊó∂Èó¥Ëá≥ÂÖ≥ÈáçË¶Å„ÄÇReddit Ëä±‰∫ÜÂ§öÊï∞Êó∂Èó¥Âú®‰∏ªÁ∫øÁ®ã‰∏äÔºåWork/Background Á∫øÁ®ãÁöÑÂà©Áî®ÁéáÂæà‰Ωé„ÄÇ&lt;/p&gt;
&lt;p&gt;ËøôÂæóÁõä‰∫éÂ∞ÜÂ§ßÂåÖÂàÜÂâ≤ÊàêÂ§ö‰∏™Â∞èÂåÖÔºàÊØîÂ¶ÇÊØè‰∏™ 50KBÔºâÔºå‰ª•ËææÂà∞ÊúÄÂ§ßÂπ∂Ë°åÂåñÔºå‰ªéËÄåÊØè‰∏™ÂåÖÈÉΩÂèØ‰ª•Ë¢´Áã¨Á´ãÂú∞ÊµÅÂºèËß£ÊûêÁºñËØëÔºåÂáèËΩª‰∏ªÁ∫øÁ®ãÂú®ÂêØÂä®Èò∂ÊÆµÁöÑÂéãÂäõ„ÄÇ&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/facebook-main-thread.svg&quot; width=&quot;1280&quot; height=&quot;774&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Facebook Âú® Macbook Pro ‰∏äÁöÑ‰∏ªÁ∫øÁ®ãÂíå worker Á∫øÁ®ãËß£ÊûêÁºñËØëÊó∂Èó¥ÂØπÊØî&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;ÂÜçÊù•ÁúãÁúã Facebook.com„ÄÇFacebookÈÄöËøá 292 ‰∏™ËØ∑Ê±ÇÂä†ËΩΩ‰∫Ü 6MB ÂéãÁº©ÂêéÁöÑ JSÔºåÂÖ∂‰∏≠Êúâ‰∫õÊòØÂºÇÊ≠•ÁöÑÔºåÊúâ‰∫õÊòØÈ¢ÑÂä†ËΩΩÁöÑÔºåËøòÊúâ‰∫õÁöÑÂä†ËΩΩ‰ºòÂÖàÁ∫ßËæÉ‰Ωé„ÄÇÂÆÉ‰ª¨ÂæàÂ§ö JavaScript ÁöÑÁ≤íÂ∫¶ÈÉΩÈùûÂ∏∏Â∞è - ËøôÂØπ Background/Worker Á∫øÁ®ã‰∏äÁöÑÊï¥‰ΩìÂπ∂Ë°åÂåñÂæàÊúâÁî®ÔºåÂõ†‰∏∫Ëøô‰∫õÂ∞èÁöÑ JavaScript ÂèØ‰ª•ÂêåÊó∂Ë¢´ÊµÅÂºèËß£ÊûêÁºñËØë„ÄÇ&lt;/p&gt;
&lt;p&gt;Ê≥®ÊÑèÔºå‰Ω†ÂèØËÉΩ‰∏çÊòØ FacebookÔºåÂæàÂèØËÉΩÊ≤°Êúâ‰∏Ä‰∏™Á±ª‰ºº Facebook ÊàñËÄÖ Gmail ËøôÊ†∑ÁöÑÈïøÂØøÂ∫îÁî®ÔºåÂú®Ê°åÈù¢Á´ØÔºåÂÆÉ‰ª¨ÊîæÂ¶ÇÊ≠§Â§öÁöÑ JavaScript ÊòØÊó†ÂèØÈùûËÆÆÁöÑ„ÄÇÁÑ∂ËÄåÔºå‰∏ÄËà¨Êù•ËØ¥ÔºåÂ∫îËØ•ËÆ©‰Ω†ÁöÑÂåÖÁöÑÁ≤íÂ∫¶ËæÉÁ≤óÔºåÂπ∂‰∏îÊåâÈúÄÂä†ËΩΩ„ÄÇ&lt;/p&gt;
&lt;p&gt;Â∞ΩÁÆ°Â§öÊï∞ JavaScript Ëß£ÊûêÁºñËØë‰ªªÂä°ÂèØ‰ª•Âú® background Á∫øÁ®ã‰∏≠‰ª•ÊµÅÁöÑÂΩ¢ÂºèÂÆåÊàêÔºå‰ΩÜÊòØÊüê‰∫õ‰ªªÂä°‰ªçÁÑ∂ÂøÖÈ°ªË¶ÅÂú®‰∏ªÁ∫øÁ®ã‰∏≠ËøõË°å„ÄÇÂΩì‰∏ªÁ∫øÁ®ãÂøôÁ¢åÊó∂ÔºåÈ°µÈù¢‰∏çËÉΩÂìçÂ∫îÁî®Êà∑ËæìÂÖ•„ÄÇÊ≥®ÊÑèÂÖ≥Ê≥®‰∏ãËΩΩÊâßË°å‰ª£Á†ÅÂØπ‰Ω†ÁöÑÁî®Êà∑‰ΩìÈ™åÈÄ†ÊàêÁöÑÂΩ±Âìç„ÄÇ&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;strong&gt;Ê≥®ÊÑèÔºö&lt;/strong&gt; ÂΩì‰∏ãÔºå‰∏çÊòØÊâÄÊúâÁöÑ JavaScript ÂºïÊìéÂíåÊµèËßàÂô®ÈÉΩÂÆûÁé∞‰∫Ü script streaming Êù•‰ºòÂåñÂä†ËΩΩ„ÄÇ‰ΩÜÊàë‰ª¨Áõ∏‰ø°Â§ßÂÆ∂‰∏∫‰∫Ü‰ºòÁßÄÁî®Êà∑‰ΩìÈ™å‰ºöÂä†ÂÖ•ËøôÈ°π‰ºòÂåñÁöÑ„ÄÇ&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;json&quot;&gt;Ëß£Êûê JSON ÁöÑÊÄßËÉΩÊçüËÄó &lt;a class=&quot;bookmark&quot; href=&quot;#json&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Áî±‰∫é JSON ËØ≠Ê≥ïÊØî JavaScript ËØ≠Ê≥ïÁÆÄÂçïÂæóÂ§öÔºåËß£Êûê JSON ‰πü‰ºöÊõ¥Âø´„ÄÇËøô‰∏ÄÁÇπÂèØ‰ª•Áî®‰∫éÊèêÂçá web Â∫îÁî®ÁöÑÂêØÂä®ÊÄßËÉΩÔºåÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî®Á±ª‰ºº JSON ÁöÑÂØπË±°Â≠óÈù¢ÈáèÈÖçÁΩÆÔºàÊØîÂ¶ÇÂÜÖËÅî Redux storeÔºâ„ÄÇ‰∏çË¶Å‰ΩøÁî® JavaScript ÂØπË±°Â≠óÈù¢ÈáèÊù•ÂÜÖËÅîÊï∞ÊçÆÔºåÊØîÂ¶ÇËøôÊ†∑Ôºö&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; foo&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bar&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1337&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// üêå&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‚Ä¶ÂÆÉÂèØ‰ª•Ë¢´Ë°®Á§∫ÊàêÂ≠óÁ¨¶‰∏≤ÂåñÁöÑ JSON Ê†ºÂºèÔºåËøêË°åÊó∂‰ºöÂèòÊàêËß£ÊûêÂêéÁöÑ JSON:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;{&quot;foo&quot;:42,&quot;bar&quot;:1337}&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// üöÄ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ëã• JSON Â≠óÁ¨¶‰∏≤Âè™Ë¢´ÊâßË°å‰∏ÄÊ¨°ÔºåÂ∞§ÂÖ∂ÊòØÂú®ÂÜ∑ÂêØÂä®Èò∂ÊÆµÔºå&lt;code&gt;JSON.parse&lt;/code&gt; ÊñπÊ≥ïÁõ∏ÊØî JavaScript ÂØπË±°Â≠óÈù¢Èáè‰ºöÂø´ÂæóÂ§ö„ÄÇÂú®Â§ß‰∫é 10 KB ÁöÑÂØπË±°‰∏ä‰ΩøÁî®Ëøô‰∏™ÊäÄÂ∑ßÁöÑÊïàÊûúÊõ¥‰Ω≥ - ‰ΩÜÂú®ÂÆûÈôÖÂ∫îÁî®ÂâçÔºåËøòÊòØÂÖàË¶ÅÊµãËØï‰∏ãÁúüÂÆûÊïàÊûú„ÄÇ&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/json.svg&quot; width=&quot;842&quot; height=&quot;520&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;&lt;code&gt;JSON.parse(&#39;‚Ä¶&#39;)&lt;/code&gt; is &lt;a href=&quot;https://github.com/GoogleChromeLabs/json-parse-benchmark&quot;&gt;much faster&lt;/a&gt; to parse, compile, and execute compared to an equivalent JavaScript literal ‚Äî not just in V8 (1.7√ó as fast), but in all major JavaScript engines.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Âú®Â§ßÂûãÊï∞ÊçÆ‰∏ä‰ΩøÁî®ÊôÆÈÄöÂØπË±°Â≠óÈù¢ÈáèËøòÊúâ‰∏™È£éÈô©ÔºöÂÆÉ‰ª¨ÂèØËÉΩË¢´Ëß£Êûê&lt;strong&gt;‰∏§Ê¨°&lt;/strong&gt;ÔºÅ&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Á¨¨‰∏ÄÊ¨°ÂèëÁîü‰∫éÂ≠óÈù¢ÈáèÈ¢ÑËß£ÊûêÈò∂ÊÆµ„ÄÇ&lt;/li&gt;
&lt;li&gt;Á¨¨‰∫åÊ¨°ÂèëÁîü‰∫éÂ≠óÈù¢ÈáèÊáíËß£ÊûêÈò∂ÊÆµ„ÄÇ&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Á¨¨‰∏ÄÊ¨°Ëß£ÊûêÊó†Ê≥ïÈÅøÂÖç„ÄÇÂπ∏ËøêÂú∞ÔºåÁ¨¨‰∫åÊ¨°ÂèØ‰ª•ÈÄöËøáÂ∞ÜÂØπË±°Â≠óÈù¢ÈáèÊîæÂú®È°∂Â±ÇÊù•ÈÅøÂÖçÔºåÊàñËÄÖÊîæÂú® &lt;a href=&quot;https://v8.js.cn/blog/preparser#pife&quot;&gt;PIFE&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;repeat-visits&quot;&gt;ÂÖ≥‰∫éÈáçÂ§çËÆøÈóÆ‰∏äÁöÑËß£Êûê/ÁºñËØëÔºü &lt;a class=&quot;bookmark&quot; href=&quot;#repeat-visits&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V8 ÁöÑÂ≠óËäÇÁ†ÅÁºìÂ≠ò‰ºòÂåñÂ§ßÊúâÂ∏ÆÂä©„ÄÇÂΩìÈ¶ñÊ¨°ËØ∑Ê±Ç JavaScriptÔºåChrome ‰∏ãËΩΩÁÑ∂ÂêéÂ∞ÜÂÖ∂‰∫§Áªô V8 ÁºñËØë„ÄÇChrome ‰πü‰ºöÂ∞ÜÊñá‰ª∂Â≠òËøõÊµèËßàÂô®ÁöÑÁ£ÅÁõòÁºìÂ≠ò‰∏≠„ÄÇÂΩì JS Êñá‰ª∂ÂÜçÊ¨°ËØ∑Ê±ÇÔºåChrome ‰ªéÊµèËßàÂô®ÁºìÂ≠ò‰∏≠Â∞ÜÂÖ∂ÂèñÂá∫ÔºåÂπ∂ÂÜçÊ¨°Â∞ÜÂÖ∂‰∫§Áªô V8 ÁºñËØë„ÄÇËøô‰∏™Êó∂ÂÄôÔºåÁºñËØëÂêé‰ª£Á†ÅÊòØÂ∫èÂàóÂåñÂêéÁöÑÔºå‰ºö‰Ωú‰∏∫ÂÖÉÊï∞ÊçÆË¢´Ê∑ªÂä†Âà∞ÁºìÂ≠òÁöÑËÑöÊú¨Êñá‰ª∂‰∏ä„ÄÇ&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/code-caching.png&quot; srcset=&quot;https://v8.js.cn/_img/cost-of-javascript-2019/code-caching@2x.png 2x&quot; width=&quot;1431&quot; height=&quot;774&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;V8 ‰∏≠ÁöÑÂ≠óËäÇÁ†ÅÁºìÂ≠òÂ∑•‰ΩúÁ§∫ÊÑèÂõæ&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Á¨¨‰∏âÊ¨°ÔºåChrome Â∞ÜÊñá‰ª∂ÂíåÊñá‰ª∂ÂÖÉÊï∞ÊçÆ‰ªéÁºìÂ≠ò‰∏≠ÂèñÂá∫Ôºå‰∏ÄËµ∑‰∫§Áªô V8 Â§ÑÁêÜ„ÄÇV8 ÂØπÂÖÉÊï∞ÊçÆ‰ΩúÂèçÂ∫èÂàóÂåñÔºåËøôÊ†∑ÂèØ‰ª•Ë∑≥ËøáÁºñËØë„ÄÇÂ≠óËäÇÁ†ÅÁºìÂ≠ò‰ºöÂú® 72 Â∞èÊó∂ÂÜÖÁöÑÂâç‰∏§Ê¨°ËÆøÈóÆÁîüÊïà„ÄÇÈÖçÂêà‰ΩøÁî® service worker Êù•ÁºìÂ≠ò JavaScript ‰ª£Á†ÅÔºåChrome ÁöÑÂ≠óËäÇÁ†ÅÁºìÂ≠òÊïàÊûúÊõ¥‰Ω≥„ÄÇ‰Ω†ÂèØ‰ª•Âú®ÁªôÂºÄÂèëËÄÖËÆ≤ÁöÑ&lt;a href=&quot;https://v8.js.cn/blog/code-caching-for-devs&quot;&gt;Â≠óËäÇÁ†ÅÁºìÂ≠ò&lt;/a&gt;ËøôÁØáÊñáÁ´†‰∏≠‰∫ÜËß£Âà∞Êõ¥Â§öÁªÜËäÇ„ÄÇ&lt;/p&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;ÁªìËÆ∫ &lt;a class=&quot;bookmark&quot; href=&quot;#conclusions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2019 Âπ¥Ôºå‰∏ãËΩΩÂíåÊâßË°åÊó∂Èó¥ÊòØÂä†ËΩΩ JavaScript ÁöÑ‰∏ªË¶ÅÁì∂È¢à„ÄÇÈ¶ñÂ±èÂ±ïÁ§∫ÂÜÖÂÆπÈáå‰ΩøÁî®ÂºÇÊ≠•ÁöÑÔºàÂÜÖËÅîÔºâJavaScriptÁöÑÂ∞èÂûãÂåÖÔºåÈ°µÈù¢Ââ©‰∏ãÈÉ®ÂàÜ‰ΩøÁî®Âª∂ËøüÔºàdeferredÔºâÂä†ËΩΩÁöÑ JavaScript„ÄÇÂàÜËß£Â§ßÂûãÂåÖÔºåÂÆûÁé∞‰ª£Á†ÅÊåâÈúÄÂä†ËΩΩ„ÄÇËøôÊ†∑ÂèØ‰ª•ÊúÄÂ§ßÂåñ V8 ‰∏≠ÁöÑÂπ∂Ë°åËß£Êûê„ÄÇ&lt;/p&gt;
&lt;p&gt;ÁßªÂä®ËÆæÂ§á‰∏äÔºåËÄÉËôëÂà∞ÁΩëÁªú„ÄÅÂÜÖÂ≠ò‰ΩøÁî®Âíå‰ΩéÁ´Ø CPU ‰∏äÁöÑÊâßË°åÊó∂Èó¥Ôºå‰Ω†Â∫îËØ•‰º†ËæìÊõ¥Â∞ëÁöÑ JavaScript„ÄÇÂπ≥Ë°°ÂèØÁºìÂ≠òÊÄßÂíåÂª∂ËøüÔºåÂÆûÁé∞Âú®‰∏ªÁ∫øÁ®ã‰πãÂ§ñËß£ÊûêÁºñËØë‰ªªÂä°Êï∞ÈáèÁöÑÊúÄÂ§ßÂåñ„ÄÇ&lt;/p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Ëøõ‰∏ÄÊ≠•ÈòÖËØª &lt;a class=&quot;bookmark&quot; href=&quot;#further-reading&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://v8.js.cn/blog/scanner&quot;&gt;Blazingly fast parsing, part 1: optimizing the scanner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v8.js.cn/blog/preparser&quot;&gt;Blazingly fast parsing, part 2: lazy parsing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>V8 release v7.6</title><link href="https://v8.js.cn/blog/v8-release-76/"/><updated>2019-06-19T16:45:00+00:00</updated><id>https://v8.js.cn/blog/v8-release-76/</id><author><name>Adam Klein</name></author><content type="html">&lt;p&gt;Every six weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.js.cn/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8‚Äôs Git master immediately before a Chrome Beta milestone. Today we‚Äôre pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/7.6&quot;&gt;V8 version 7.6&lt;/a&gt;, which is in beta until its release in coordination with Chrome 76 Stable in several weeks. V8 v7.6 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance (size &amp;amp; speed) &lt;a class=&quot;bookmark&quot; href=&quot;#performance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;json.parse-improvements&quot;&gt;&lt;code&gt;JSON.parse&lt;/code&gt; improvements &lt;a class=&quot;bookmark&quot; href=&quot;#json.parse-improvements&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In modern JavaScript applications, JSON is commonly used as a format to communicate structured data. By speeding up JSON parsing, we can reduce the latency of this communication. In V8 v7.6, we‚Äôve overhauled our JSON parser to be much faster at scanning and parsing JSON. This results in up to 2.7√ó faster parsing of data served by popular web pages.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-76/json-parsing.svg&quot; width=&quot;600&quot; height=&quot;371&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Chart showing improved performance of &lt;code&gt;JSON.parse&lt;/code&gt; on a variety of websites&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Up to V8 v7.5, the JSON parser was a recursive parser that would use native stack space relative to the nesting depth of the incoming JSON data. This meant we could run out of stack for very deeply nested JSON data. V8 v7.6 switches to an iterative parser that manages its own stack, which is limited only by available memory.&lt;/p&gt;
&lt;p&gt;The new JSON parser is also more memory-efficient. By buffering properties before we create the final object we can now decide how to allocate the result in an optimal way. For objects with named properties we allocate objects with the exact amount of space needed for the named properties in the incoming JSON data (up to 128 named properties). In case JSON objects contain indexed property names, we allocate an elements backing store that uses the minimal amount of space; either a flat array or a dictionary. JSON arrays are now parsed to an array that exactly fits the number of elements in the input data.&lt;/p&gt;
&lt;h3 id=&quot;frozen%2Fsealed-array-improvements&quot;&gt;Frozen/sealed array improvements &lt;a class=&quot;bookmark&quot; href=&quot;#frozen%2Fsealed-array-improvements&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Performance of calls on frozen or sealed arrays (and array-like objects) received numerous improvements. V8 v7.6 boosts the following JavaScript coding patterns, where &lt;code&gt;frozen&lt;/code&gt; is a frozen or sealed array or array-like object:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;frozen.indexOf(v)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;frozen.includes(v)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;spread calls such as &lt;code&gt;fn(...frozen)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;spread calls with a nested array spread such as &lt;code&gt;fn(...[...frozen])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;apply calls with array spread such as &lt;code&gt;fn.apply(this, [...frozen])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The chart below shows the improvements.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-76/frozen-sealed-elements.svg&quot; width=&quot;660&quot; height=&quot;408&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Chart showing performance boost on a variety of array operations&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://bit.ly/fast-frozen-sealed-elements-in-v8&quot;&gt;See the ‚Äúfast frozen &amp;amp; sealed elements in V8‚Äù design doc&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h3 id=&quot;unicode-string-handling&quot;&gt;Unicode string handling &lt;a class=&quot;bookmark&quot; href=&quot;#unicode-string-handling&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An optimization when &lt;a href=&quot;https://chromium.googlesource.com/v8/v8/+/734c1456d942a03d79aab4b3b0e57afbc803ceea&quot;&gt;converting strings to Unicode&lt;/a&gt; resulted in a significant speed-up for calls such as &lt;code&gt;String#localeCompare&lt;/code&gt;, &lt;code&gt;String#normalize&lt;/code&gt;, and some of the &lt;code&gt;Intl&lt;/code&gt; APIs. For example, this change resulted in around 2√ó the raw throughput of &lt;code&gt;String#localeCompare&lt;/code&gt; for one-byte strings.&lt;/p&gt;
&lt;h2 id=&quot;javascript-language-features&quot;&gt;JavaScript language features &lt;a class=&quot;bookmark&quot; href=&quot;#javascript-language-features&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;promise.allsettled&quot;&gt;&lt;code&gt;Promise.allSettled&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;#promise.allsettled&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://v8.js.cn/features/promise-combinators#promise.allsettled&quot;&gt;&lt;code&gt;Promise.allSettled(promises)&lt;/code&gt;&lt;/a&gt; provides a signal when all the input promises are &lt;em&gt;settled&lt;/em&gt;, which means they‚Äôre either &lt;em&gt;fulfilled&lt;/em&gt; or &lt;em&gt;rejected&lt;/em&gt;. This is useful in cases where you don‚Äôt care about the state of the promise, you just want to know when the work is done, regardless of whether it was successful. &lt;a href=&quot;https://v8.js.cn/features/promise-combinators&quot;&gt;Our explainer on promise combinators&lt;/a&gt; has more details and includes an example.&lt;/p&gt;
&lt;h3 id=&quot;localized-bigint&quot;&gt;Improved &lt;code&gt;BigInt&lt;/code&gt; support &lt;a class=&quot;bookmark&quot; href=&quot;#localized-bigint&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://v8.js.cn/features/bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; now has better API support in the language. You can now format a &lt;code&gt;BigInt&lt;/code&gt; in a locale-aware manner by using the &lt;code&gt;toLocaleString&lt;/code&gt; method. This works just like it does for regular numbers:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token number&quot;&gt;12345678901234567890n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLocaleString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// üêå&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;12,345,678,901,234,567,890&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token number&quot;&gt;12345678901234567890n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLocaleString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;de&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// üêå&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;12.345.678.901.234.567.890&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you plan on formatting multiple numbers or &lt;code&gt;BigInt&lt;/code&gt;s using the same locale, it‚Äôs more efficient to use the &lt;code&gt;Intl.NumberFormat&lt;/code&gt; API, which now supports &lt;code&gt;BigInt&lt;/code&gt;s in its &lt;code&gt;format&lt;/code&gt; and &lt;code&gt;formatToParts&lt;/code&gt; methods. This way, you can create a single re-usable formatter instance.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nf &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NumberFormat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fr&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;nf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;12345678901234567890n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// üöÄ&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;12‚ÄØ345‚ÄØ678‚ÄØ901‚ÄØ234‚ÄØ567‚ÄØ890&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;nf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formatToParts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;123456n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// üöÄ&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí [&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí   { type: &#39;integer&#39;, value: &#39;123&#39; },&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí   { type: &#39;group&#39;, value: &#39;‚ÄØ&#39; },&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí   { type: &#39;integer&#39;, value: &#39;456&#39; }&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí ]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;intl-datetimeformat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; improvements &lt;a class=&quot;bookmark&quot; href=&quot;#intl-datetimeformat&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Apps commonly display date intervals or date ranges to show the span of an event, such as a hotel reservation, the billing period of a service, or a music festival. The &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; API now supports &lt;code&gt;formatRange&lt;/code&gt; and &lt;code&gt;formatRangeToParts&lt;/code&gt; methods to conveniently format date ranges in a locale-specific manner.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;2019-05-07T09:20:00&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;May 7, 2019&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;2019-05-09T16:00:00&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;May 9, 2019&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fmt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DateTimeFormat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;en&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  year&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;numeric&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  month&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;long&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  day&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;numeric&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; output &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formatRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;May 7 ‚Äì 9, 2019&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; parts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formatRangeToParts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí [&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí   { &#39;type&#39;: &#39;month&#39;,   &#39;value&#39;: &#39;May&#39;,  &#39;source&#39;: &#39;shared&#39; },&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí   { &#39;type&#39;: &#39;literal&#39;, &#39;value&#39;: &#39; &#39;,    &#39;source&#39;: &#39;shared&#39; },&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí   { &#39;type&#39;: &#39;day&#39;,     &#39;value&#39;: &#39;7&#39;,    &#39;source&#39;: &#39;startRange&#39; },&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí   { &#39;type&#39;: &#39;literal&#39;, &#39;value&#39;: &#39; ‚Äì &#39;,  &#39;source&#39;: &#39;shared&#39; },&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí   { &#39;type&#39;: &#39;day&#39;,     &#39;value&#39;: &#39;9&#39;,    &#39;source&#39;: &#39;endRange&#39; },&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí   { &#39;type&#39;: &#39;literal&#39;, &#39;value&#39;: &#39;, &#39;,   &#39;source&#39;: &#39;shared&#39; },&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí   { &#39;type&#39;: &#39;year&#39;,    &#39;value&#39;: &#39;2019&#39;, &#39;source&#39;: &#39;shared&#39; },&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí ]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additionally, the &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;formatToParts&lt;/code&gt;, and &lt;code&gt;formatRangeToParts&lt;/code&gt; methods now support the new &lt;code&gt;timeStyle&lt;/code&gt; and &lt;code&gt;dateStyle&lt;/code&gt; options:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dtf &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DateTimeFormat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;de&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  timeStyle&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;medium&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  dateStyle&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;short&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;dtf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Üí &#39;19.06.19, 13:33:37&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;native-stack-walking&quot;&gt;Native stack walking &lt;a class=&quot;bookmark&quot; href=&quot;#native-stack-walking&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While V8 can walk its own call stack (e.g. when debugging or profiling in the DevTools), the Windows operating system was unable to walk a call stack that contains code generated by TurboFan when running on the x64 architecture. This could cause &lt;em&gt;broken stacks&lt;/em&gt; when using native debuggers or ETW sampling to analyze processes that use V8. A recent change enables V8 to &lt;a href=&quot;https://chromium.googlesource.com/v8/v8/+/3cda21de77d098a612eadf44d504b188a599c5f0&quot;&gt;register the necessary metadata&lt;/a&gt; for Windows to be able to walk these stacks on x64, and in v7.6 this is enabled by default.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;#v8-api&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/7.5..branch-heads/7.6 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an &lt;a href=&quot;https://v8.js.cn/docs/source-code#using-git&quot;&gt;active V8 checkout&lt;/a&gt; can use &lt;code&gt;git checkout -b 7.6 -t branch-heads/7.6&lt;/code&gt; to experiment with the new features in V8 v7.6. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome‚Äôs Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>Code caching for WebAssembly developers</title><link href="https://v8.js.cn/blog/wasm-code-caching/"/><updated>2019-06-17T00:00:00+00:00</updated><id>https://v8.js.cn/blog/wasm-code-caching/</id><author><name>Bill Budge, putting the Ca-ching! in caching</name></author><content type="html">&lt;p&gt;There‚Äôs a saying among developers that the fastest code is code that doesn‚Äôt run. Likewise, the fastest compiling code is code that doesn‚Äôt have to be compiled. WebAssembly code caching is a new optimization in Chrome and V8 that tries to avoid code compilation by caching the native code produced by the compiler. We‚Äôve &lt;a href=&quot;https://v8.js.cn/blog/code-caching&quot;&gt;written&lt;/a&gt; &lt;a href=&quot;https://v8.js.cn/blog/improved-code-caching&quot;&gt;about&lt;/a&gt; &lt;a href=&quot;https://v8.js.cn/blog/code-caching-for-devs&quot;&gt;how&lt;/a&gt; Chrome and V8 cache JavaScript code in the past, and best practices for taking advantage of this optimization. In this blog post, we describe the operation of Chrome‚Äôs WebAssembly code cache and how developers can take advantage of it to speed up loading for applications with large WebAssembly modules.&lt;/p&gt;
&lt;h2 id=&quot;recap&quot;&gt;WebAssembly compilation recap &lt;a class=&quot;bookmark&quot; href=&quot;#recap&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WebAssembly is a way to run non-JavaScript code on the Web. A web app can use WebAssembly by loading a &lt;code&gt;.wasm&lt;/code&gt; resource, which contains partially compiled code from another language, such as C, C++, or Rust (and more to come.) The WebAssembly compiler‚Äôs job is to decode the &lt;code&gt;.wasm&lt;/code&gt; resource, validate that it is well-formed, and then compile it to native machine code that can be executed on the user‚Äôs machine.&lt;/p&gt;
&lt;p&gt;V8 has two compilers for WebAssembly: Liftoff and TurboFan. &lt;a href=&quot;https://v8.js.cn/blog/liftoff&quot;&gt;Liftoff&lt;/a&gt; is the baseline compiler, which compiles modules as quickly as possible so execution can begin as soon as possible. TurboFan is V8‚Äôs optimizing compiler for both JavaScript and WebAssembly. It runs in the background to generate high-quality native code to give a web app optimal performance over the long term. For large WebAssembly modules, TurboFan can take significant amounts of time ‚Äî 30 seconds to a minute or more ‚Äî to completely finish compiling a WebAssembly module to native code.&lt;/p&gt;
&lt;p&gt;That‚Äôs where code caching comes in. Once TurboFan has finished compiling a large WebAssembly module, Chrome can save the code in its cache so that the next time the module is loaded, we can skip both Liftoff and TurboFan compilation, leading to faster startup and reduced power consumption ‚Äî compiling code is very CPU-intensive.&lt;/p&gt;
&lt;p&gt;WebAssembly code caching uses the same machinery in Chrome that is used for JavaScript code caching. We use the same type of storage, and the same double-keyed caching technique that keeps code compiled by different origins separate in accordance with &lt;a href=&quot;https://developers.google.com/web/updates/2018/07/site-isolation&quot;&gt;site isolation&lt;/a&gt;, an important Chrome security feature.&lt;/p&gt;
&lt;h2 id=&quot;algorithm&quot;&gt;WebAssembly code caching algorithm &lt;a class=&quot;bookmark&quot; href=&quot;#algorithm&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For now, WebAssembly caching is only implemented for the streaming API calls, &lt;code&gt;compileStreaming&lt;/code&gt; and &lt;code&gt;instantiateStreaming&lt;/code&gt;. These operate on an HTTP fetch of a &lt;code&gt;.wasm&lt;/code&gt; resource, making it easier to use Chrome‚Äôs resource fetching and caching mechanisms, and providing a handy resource URL to use as the key to identify the WebAssembly module. The caching algorithm works as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When a &lt;code&gt;.wasm&lt;/code&gt; resource is first requested (i.e. a &lt;em&gt;cold run&lt;/em&gt;), Chrome downloads it from the network and streams it to V8 to compile. Chrome also stores the &lt;code&gt;.wasm&lt;/code&gt; resource in the browser‚Äôs resource cache, stored in the file system of the user‚Äôs device. This resource cache allows Chrome to load the resource faster the next time it‚Äôs needed.&lt;/li&gt;
&lt;li&gt;When TurboFan has completely finished compiling the module, and if the &lt;code&gt;.wasm&lt;/code&gt; resource is large enough (currently 128 kB), Chrome writes the compiled code to the WebAssembly code cache. This code cache is physically separate from the resource cache in step 1.&lt;/li&gt;
&lt;li&gt;When a &lt;code&gt;.wasm&lt;/code&gt; resource is requested a second time (i.e. a &lt;em&gt;hot run&lt;/em&gt;), Chrome loads the &lt;code&gt;.wasm&lt;/code&gt; resource from the resource cache and simultaneously queries the code cache. If there is a cache hit, then the compiled module bytes are sent to the renderer process and passed to V8 which deserializes the code instead of compiling the module. Deserializing is faster and less CPU-intensive than compiling.&lt;/li&gt;
&lt;li&gt;It may be that the cached code is no longer valid. This can happen because the &lt;code&gt;.wasm&lt;/code&gt; resource has changed, or because V8 has changed, something that is expected to happen at least every 6 weeks because of Chrome‚Äôs rapid release cycle. In this case the cached native code is cleared from the cache, and compilation proceeds as in step 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on this description, we can give some recommendations for improving your website‚Äôs use of the WebAssembly code cache.&lt;/p&gt;
&lt;h2 id=&quot;stream&quot;&gt;Tip 1: use the WebAssembly streaming API &lt;a class=&quot;bookmark&quot; href=&quot;#stream&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since code caching only works with the streaming API, compile or instantiate your WebAssembly module with &lt;code&gt;compileStreaming&lt;/code&gt; or &lt;code&gt;instantiateStreaming&lt;/code&gt;, as in this JavaScript snippet:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fetchPromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fibonacci.wasm&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; instance &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; WebAssembly&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;instantiateStreaming&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fetchPromise&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; instance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fibonacci&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;a href=&quot;https://developers.google.com/web/updates/2018/04/loading-wasm&quot;&gt;article&lt;/a&gt; goes into detail about the advantages of using the WebAssembly streaming API. Emscripten tries to use this API by default when it generates loader code for your app. Note that streaming requires that the &lt;code&gt;.wasm&lt;/code&gt; resource has the correct MIME type, so the server must send the &lt;code&gt;Content-Type: application/wasm&lt;/code&gt; header in its response.&lt;/p&gt;
&lt;h2 id=&quot;cache-friendly&quot;&gt;Tip 2: be cache-friendly &lt;a class=&quot;bookmark&quot; href=&quot;#cache-friendly&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since code caching depends on the resource URL and whether the &lt;code&gt;.wasm&lt;/code&gt; resource is up-to-date, developers should try to keep those both stable. If the &lt;code&gt;.wasm&lt;/code&gt; resource is fetched from a different URL, it is considered different and V8 has to compile the module again. Similarly, if the &lt;code&gt;.wasm&lt;/code&gt; resource is no longer valid in the resource cache, then Chrome has to throw away any cached code.&lt;/p&gt;
&lt;h3 id=&quot;keep-code-stable&quot;&gt;Keep your code stable &lt;a class=&quot;bookmark&quot; href=&quot;#keep-code-stable&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Whenever you ship a new WebAssembly module, it must be completely recompiled. Ship new versions of your code only when necessary to deliver new features or fix bugs. When your code hasn‚Äôt changed, let Chrome know. When the browser makes an HTTP request for a resource URL, such as a WebAssembly module, it includes the date and time of the last fetch of that URL. If the server knows that the file hasn‚Äôt changed, it can send back a &lt;code&gt;304 Not Modified&lt;/code&gt; response, which tells Chrome and V8 that the cached resource and therefore the cached code are still valid. On the other hand, returning a &lt;code&gt;200 OK&lt;/code&gt; response updates the cached &lt;code&gt;.wasm&lt;/code&gt; resource and invalidates the code cache, reverting WebAssembly back to a cold run. Follow &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching&quot;&gt;web resource best practices&lt;/a&gt; by using the response to inform the browser about whether the &lt;code&gt;.wasm&lt;/code&gt; resource is cacheable, how long it‚Äôs expected to be valid, or when it was last modified.&lt;/p&gt;
&lt;h3 id=&quot;url&quot;&gt;Don‚Äôt change your code‚Äôs URL &lt;a class=&quot;bookmark&quot; href=&quot;#url&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Cached compiled code is associated with the URL of the &lt;code&gt;.wasm&lt;/code&gt; resource, which makes it easy to look up without having to scan the actual resource. This means that changing the URL of a resource (including any query parameters!) creates a new entry in our resource cache, which also requires a complete recompile and creates a new code cache entry.&lt;/p&gt;
&lt;h3 id=&quot;go-big&quot;&gt;Go big (but not too big!) &lt;a class=&quot;bookmark&quot; href=&quot;#go-big&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The principal heuristic of WebAssembly code caching is the size of the &lt;code&gt;.wasm&lt;/code&gt; resource. If the &lt;code&gt;.wasm&lt;/code&gt; resource is smaller than a certain threshold size, we don‚Äôt cache the compiled module bytes. The reasoning here is that V8 can compile small modules quickly, possibly faster than loading the compiled code from the cache. At the moment, the cutoff is for &lt;code&gt;.wasm&lt;/code&gt; resources of 128 kB or more.&lt;/p&gt;
&lt;p&gt;But bigger is better only up to a point. Because caches take up space on the user‚Äôs machine, Chrome is careful not to consume too much space. Right now, on desktop machines, the code caches typically hold a few hundred megabytes of data. Since the Chrome caches also restrict the largest entries in the cache to some fraction of the total cache size, there is a further limit of about 150 MB for the compiled WebAssembly code (half the total cache size). It is important to note that compiled modules are often 5‚Äì7 times larger than the corresponding &lt;code&gt;.wasm&lt;/code&gt; resource on a typical desktop machine.&lt;/p&gt;
&lt;p&gt;This size heuristic, like the rest of the caching behavior, may change as we determine what works best for users and developers.&lt;/p&gt;
&lt;h3 id=&quot;service-worker&quot;&gt;Use a service worker &lt;a class=&quot;bookmark&quot; href=&quot;#service-worker&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WebAssembly code caching is enabled for workers and service workers, so it‚Äôs possible to use them to load, compile, and cache a new version of code so it‚Äôs available the next time your app starts. Every web site must perform at least one full compilation of a WebAssembly module ‚Äî use workers to hide that from your users.&lt;/p&gt;
&lt;h2 id=&quot;tracing&quot;&gt;Tracing &lt;a class=&quot;bookmark&quot; href=&quot;#tracing&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a developer, you might want to check that your compiled module is being cached by Chrome. WebAssembly code caching events are not exposed by default in Chrome‚Äôs Developer Tools, so the best way to find out whether your modules are being cached is to use the slightly lower-level &lt;code&gt;chrome://tracing&lt;/code&gt; feature.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chrome://tracing&lt;/code&gt; records instrumented traces of Chrome during some period of time. Tracing records the behavior of the entire browser, including other tabs, windows, and extensions, so it works best when done in a clean user profile, with extensions disabled, and with no other browser tabs open:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Start a new Chrome browser session with a clean user profile and extensions disabled&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;google-chrome --user-data-dir&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;mktemp -d&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt; --disable-extensions&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Navigate to &lt;code&gt;chrome://tracing&lt;/code&gt; and click ‚ÄòRecord‚Äô to begin a tracing session. On the dialog window that appears, click ‚ÄòEdit Categories‚Äô and check the &lt;code&gt;devtools.timeline&lt;/code&gt; category on the right side under ‚ÄòDisabled by Default Categories‚Äô (you can uncheck any other pre-selected categories to reduce the amount of data collected). Then click the ‚ÄòRecord‚Äô button on the dialog to begin the trace.&lt;/p&gt;
&lt;p&gt;In another tab load or reload your app. Let it run long enough, 10 seconds or more, to make sure TurboFan compilation completes. When done, click ‚ÄòStop‚Äô to end the trace. A timeline view of events appears. At the top right of the tracing window, there is a text box, just to the right of ‚ÄòView Options‚Äô. Type &lt;code&gt;v8.wasm&lt;/code&gt; to filter out non-WebAssembly events. You should see one or more of the following events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v8.wasm.streamFromResponseCallback&lt;/code&gt; ‚Äî The resource fetch passed to instantiateStreaming received a response.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v8.wasm.compiledModule&lt;/code&gt; ‚Äî TurboFan finished compiling the &lt;code&gt;.wasm&lt;/code&gt; resource.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v8.wasm.cachedModule&lt;/code&gt; ‚Äî Chrome wrote the compiled module to the code cache.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v8.wasm.moduleCacheHit&lt;/code&gt; ‚Äî Chrome found the code in its cache while loading the &lt;code&gt;.wasm&lt;/code&gt; resource.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v8.wasm.moduleCacheInvalid&lt;/code&gt; ‚Äî V8 wasn‚Äôt able to deserialize the cached code because it was out of date.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a cold run, we expect to see &lt;code&gt;v8.wasm.streamFromResponseCallback&lt;/code&gt; and &lt;code&gt;v8.wasm.compiledModule&lt;/code&gt; events. This indicates that the WebAssembly module was received, and compilation succeeded. If neither event is observed, check that your WebAssembly streaming API calls are working correctly.&lt;/p&gt;
&lt;p&gt;After a cold run, if the size threshold was exceeded, we also expect to see a &lt;code&gt;v8.wasm.cachedModule&lt;/code&gt; event, meaning that the compiled code was sent to the cache. It is possible that we get this event but that the write doesn‚Äôt succeed for some reason. There is currently no way to observe this, but metadata on the events can show the size of the code. Very large modules may not fit in the cache.&lt;/p&gt;
&lt;p&gt;When caching is working correctly, a hot run produces two events: &lt;code&gt;v8.wasm.streamFromResponseCallback&lt;/code&gt; and &lt;code&gt;v8.wasm.moduleCacheHit&lt;/code&gt;. The metadata on these events allows you to see the size of the compiled code.&lt;/p&gt;
&lt;p&gt;For more on using &lt;code&gt;chrome://tracing&lt;/code&gt;, see &lt;a href=&quot;https://v8.js.cn/blog/code-caching-for-devs&quot;&gt;our article on JavaScript (byte)code caching for developers&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For most developers, code caching should ‚Äújust work‚Äù. It works best, like any cache, when things are stable. Chrome‚Äôs caching heuristics may change between versions, but code caching does have behaviors that can be used, and limitations which can be avoided. Careful analysis using &lt;code&gt;chrome://tracing&lt;/code&gt; can help you tweak and optimize the use of the WebAssembly code cache by your web app.&lt;/p&gt;
</content></entry><entry><title>V8 release v7.5</title><link href="https://v8.js.cn/blog/v8-release-75/"/><updated>2019-05-16T15:00:00+00:00</updated><id>https://v8.js.cn/blog/v8-release-75/</id><author><name>Dan Elphick, scourge of the deprecated</name></author><content type="html">&lt;p&gt;Every six weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.js.cn/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8‚Äôs Git master immediately before a Chrome Beta milestone. Today we‚Äôre pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/7.5&quot;&gt;V8 version 7.5&lt;/a&gt;, which is in beta until its release in coordination with Chrome 75 Stable in several weeks. V8 v7.5 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;webassembly&quot;&gt;WebAssembly &lt;a class=&quot;bookmark&quot; href=&quot;#webassembly&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;implicit-caching&quot;&gt;Implicit caching &lt;a class=&quot;bookmark&quot; href=&quot;#implicit-caching&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We are planning to roll out implicit caching of WebAssembly compilation artifacts in Chrome 75. This means users that visit the same page a second time don‚Äôt need to compile the already-seen WebAssembly modules. Instead they are loaded from the cache. This works similarly to &lt;a href=&quot;https://v8.js.cn/blog/code-caching-for-devs&quot;&gt;Chromium‚Äôs JavaScript code-cache&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In case you want to use a similar feature in your V8 embedding, please take inspiration from Chromium‚Äôs implementation.&lt;/p&gt;
&lt;h3 id=&quot;bulk-memory-operations&quot;&gt;Bulk memory operations &lt;a class=&quot;bookmark&quot; href=&quot;#bulk-memory-operations&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/webassembly/bulk-memory-operations&quot;&gt;The bulk memory proposal&lt;/a&gt; adds new instructions to WebAssembly for updating large regions of memory or tables.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;memory.copy&lt;/code&gt; copies data from one region to another, even if the regions are overlapping (like C‚Äôs &lt;code&gt;memmove&lt;/code&gt;). &lt;code&gt;memory.fill&lt;/code&gt; fills a region with a given byte (like C‚Äôs &lt;code&gt;memset&lt;/code&gt;). Similar to &lt;code&gt;memory.copy&lt;/code&gt;, &lt;code&gt;table.copy&lt;/code&gt; copies from one region of a table to another, even if the regions are overlapping.&lt;/p&gt;
&lt;pre class=&quot;language-wasm&quot;&gt;&lt;code class=&quot;language-wasm&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; Copy 500 bytes from source 1000 to destination 0.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;memory&lt;/span&gt;.copy &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; Fill 1000 bytes starting at 100 with the value `123`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;memory&lt;/span&gt;.fill &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; Copy 10 table elements from source 5 to destination 15.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;table&lt;/span&gt;.copy &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The proposal also provides a way to copy a constant region into linear memory or a table. To do so, we first need to define a ‚Äúpassive‚Äù segment. Unlike ‚Äúactive‚Äù segments, these segments are not initialized during module instantiation. Instead they can be copied into a memory or table region using the &lt;code&gt;memory.init&lt;/code&gt; and &lt;code&gt;table.init&lt;/code&gt; instructions.&lt;/p&gt;
&lt;pre class=&quot;language-wasm&quot;&gt;&lt;code class=&quot;language-wasm&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; Define a passive data segment.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$hello&lt;/span&gt; passive &lt;span class=&quot;token string&quot;&gt;&quot;Hello WebAssembly&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; Copy &quot;Hello&quot; into memory at address 10.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;memory&lt;/span&gt;.init &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;;; Copy &quot;WebAssembly&quot; into memory at address 1000.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;memory&lt;/span&gt;.init &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i32&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;numeric-separators&quot;&gt;Numeric separators in JavaScript &lt;a class=&quot;bookmark&quot; href=&quot;#numeric-separators&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Large numeric literals are difficult for the human eye to parse quickly, especially when there are lots of repeating digits:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1000000000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token number&quot;&gt;1019436871.42&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To improve readability, &lt;a href=&quot;https://v8.js.cn/features/numeric-separators&quot;&gt;a new JavaScript language feature&lt;/a&gt; enables underscores as separators in numeric literals. So, the above can now be rewritten to group the digits per thousand, for example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1_000_000_000_000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token number&quot;&gt;1_019_436_871.42&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it‚Äôs easier to tell that the first number is a trillion, and the second number is in the order of 1 billion.&lt;/p&gt;
&lt;p&gt;For more examples and additional information about numeric separators, see &lt;a href=&quot;https://v8.js.cn/features/numeric-separators&quot;&gt;our explainer&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance &lt;a class=&quot;bookmark&quot; href=&quot;#performance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;script-streaming-directly-from-network&quot;&gt;Script streaming directly from network &lt;a class=&quot;bookmark&quot; href=&quot;#script-streaming-directly-from-network&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As of Chrome 75, V8 can stream scripts directly from network into the streaming parser, without waiting for the Chrome main thread.&lt;/p&gt;
&lt;p&gt;While previous Chrome versions had streaming parsing and compilation, the script source data coming in from the network always had to make its way to the Chrome main thread first before being forwarded to the streamer, for historical reasons. This meant that often, the streaming parser would be waiting for data that has arrived from the network already, but hadn‚Äôt been forwarded to the streaming task yet because it was blocked by other things happening on the main thread (such as HTML parsing, layout, or other JavaScript execution).&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-75/before.jpg&quot; srcset=&quot;https://v8.js.cn/_img/v8-release-75/before@2x.jpg 2x&quot; width=&quot;1133&quot; height=&quot;638&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Stalled background parsing tasks in Chrome 74 and older&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In Chrome 75, we connect the network ‚Äúdata pipe‚Äù directly to V8, allowing us to read network data directly during streaming parsing, skipping the dependency on the main thread.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-75/after.jpg&quot; srcset=&quot;https://v8.js.cn/_img/v8-release-75/after@2x.jpg 2x&quot; width=&quot;1133&quot; height=&quot;638&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;In Chrome 75+, background parsing tasks are no longer blocked by activity on the main thread.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This allows us to finish streaming compiles earlier, improving the loading time of pages using streaming compilation, as well as reducing the number of concurrent (but stalled) streaming parse tasks, which reduces memory consumption.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;#v8-api&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/7.4..branch-heads/7.5 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an &lt;a href=&quot;https://v8.js.cn/docs/source-code#using-git&quot;&gt;active V8 checkout&lt;/a&gt; can use &lt;code&gt;git checkout -b 7.5 -t branch-heads/7.5&lt;/code&gt; to experiment with the new features in V8 v7.5. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome‚Äôs Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content></entry><entry><title>Faster and more feature-rich internationalization APIs</title><link href="https://v8.js.cn/blog/intl/"/><updated>2019-04-25T16:45:37+00:00</updated><id>https://v8.js.cn/blog/intl/</id><author><name>‡Æö‡Æ§‡Øç‡ÆØ‡Ææ ‡Æï‡ØÅ‡Æ£‡Æö‡Øá‡Æï‡Æ∞‡Æ©‡Øç (Sathya Gunasekaran)</name></author><content type="html">&lt;p&gt;&lt;a href=&quot;https://tc39.es/ecma402/&quot;&gt;The ECMAScript Internationalization API Specification&lt;/a&gt; (ECMA-402, or &lt;code&gt;Intl&lt;/code&gt;) provides key locale-specific functionality such as date formatting, number formatting, plural form selection, and collation. The Chrome V8 and Google Internationalization teams have been collaborating on adding features to V8‚Äôs ECMA-402 implementation, while cleaning up technical debt and improving performance and interoperability with other browsers.&lt;/p&gt;
&lt;h2 id=&quot;underlying-architectural-improvements&quot;&gt;Underlying architectural improvements &lt;a class=&quot;bookmark&quot; href=&quot;#underlying-architectural-improvements&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Initially the ECMA-402 spec was implemented mostly in JavaScript using V8-extensions and lived outside the V8 codebase. Using the external Extension API meant that several of V8‚Äôs internally used APIs for type checking, lifetime management of external C++ objects and internal private data storage couldn‚Äôt be used. As part of improving startup performance, this implementation was later moved in to the V8 codebase to enable &lt;a href=&quot;https://v8.js.cn/blog/custom-startup-snapshots&quot;&gt;snapshotting&lt;/a&gt; of these builtins.&lt;/p&gt;
&lt;p&gt;V8 uses specialized &lt;code&gt;JSObject&lt;/code&gt;s with custom &lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics&quot;&gt;shapes (hidden classes)&lt;/a&gt; to describe built-in JavaScript objects specified by ECMAScript (like &lt;code&gt;Promise&lt;/code&gt;s, &lt;code&gt;Map&lt;/code&gt;s, &lt;code&gt;Set&lt;/code&gt;s, etc). With this approach, V8 can pre-allocate the required number of internal slots and generate fast accesses to these, rather than grow the object one property at a time leading to slower performance and worse memory usage.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Intl&lt;/code&gt; implementation was not modeled after such an architecture, as a consequence of the historic split. Instead, all the built-in JavaScript objects as specified by the Internationalization spec (like &lt;code&gt;NumberFormat&lt;/code&gt;, &lt;code&gt;DateTimeFormat&lt;/code&gt;) were generic &lt;code&gt;JSObject&lt;/code&gt;s that had to transition through several property additions for their internal slots.&lt;/p&gt;
&lt;p&gt;Another artifact of not having a specialized &lt;code&gt;JSObject&lt;/code&gt;s was that type checking was now more complex. The type information was stored under a private symbol and type-checked on both the JS and C++ side using expensive property access, rather than just looking up its shape.&lt;/p&gt;
&lt;h3 id=&quot;modernizing-the-codebase&quot;&gt;Modernizing the codebase &lt;a class=&quot;bookmark&quot; href=&quot;#modernizing-the-codebase&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the current move away from writing self-hosted builtins in V8, it made sense to use this opportunity to modernize the ECMA402 implementation.&lt;/p&gt;
&lt;h3 id=&quot;moving-away-from-self-hosted-js&quot;&gt;Moving away from self-hosted JS &lt;a class=&quot;bookmark&quot; href=&quot;#moving-away-from-self-hosted-js&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Although self-hosting lends itself to concise and readable code, the frequent usage of slow runtime calls to access ICU APIs led to performance issues. As a result, a lot of ICU functionality was duplicated in JavaScript to reduce the number of such runtime calls.&lt;/p&gt;
&lt;p&gt;By rewriting the builtins in C++, it became much faster to access the ICU APIs as there is no runtime call overhead now.&lt;/p&gt;
&lt;h3 id=&quot;improving-icu&quot;&gt;Improving ICU &lt;a class=&quot;bookmark&quot; href=&quot;#improving-icu&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ICU is a set of C/C++ libraries used by a large set of applications, including all the major JavaScript engines, for providing Unicode and globalization support. As part of switching &lt;code&gt;Intl&lt;/code&gt; to ICU in V8‚Äôs implementation, we &lt;a href=&quot;https://unicode-org.atlassian.net/browse/ICU-20140&quot;&gt;found&lt;/a&gt; &lt;a href=&quot;https://unicode-org.atlassian.net/browse/ICU-9562&quot;&gt;and&lt;/a&gt; &lt;a href=&quot;https://unicode-org.atlassian.net/browse/ICU-20098&quot;&gt;fixed&lt;/a&gt; several ICU bugs.&lt;/p&gt;
&lt;p&gt;As part of implementing new proposals such as &lt;a href=&quot;https://v8.js.cn/features/intl-relativetimeformat&quot;&gt;&lt;code&gt;Intl.RelativeTimeFormat&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://v8.js.cn/features/intl-listformat&quot;&gt;&lt;code&gt;Intl.ListFormat&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;Intl.Locale&lt;/code&gt;, we‚Äôve extended ICU by adding &lt;a href=&quot;https://unicode-org.atlassian.net/browse/ICU-13256&quot;&gt;several&lt;/a&gt; &lt;a href=&quot;https://unicode-org.atlassian.net/browse/ICU-20121&quot;&gt;new&lt;/a&gt; &lt;a href=&quot;https://unicode-org.atlassian.net/browse/ICU-20342&quot;&gt;APIs&lt;/a&gt; to support these new ECMAScript proposals.&lt;/p&gt;
&lt;p&gt;All of these additions help other JavaScript engines implement these proposals quicker now, pushing the web forward! For example, development is in progress in Firefox on implementing several new &lt;code&gt;Intl&lt;/code&gt; APIs based on our ICU work.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance &lt;a class=&quot;bookmark&quot; href=&quot;#performance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a result of this work, we improved the performance of the Internationalization API by optimizing several fast paths and caching the initialization of the various &lt;code&gt;Intl&lt;/code&gt; objects and the &lt;code&gt;toLocaleString&lt;/code&gt; methods on &lt;code&gt;Number.prototype&lt;/code&gt;, &lt;code&gt;Date.prototype&lt;/code&gt;, and &lt;code&gt;String.prototype&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, creating a new &lt;code&gt;Intl.NumberFormat&lt;/code&gt; object became around 24√ó faster.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/intl/performance.svg&quot; width=&quot;713&quot; height=&quot;371&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;&lt;a href=&quot;https://cs.chromium.org/chromium/src/v8/test/js-perf-test/Intl/constructor.js&quot;&gt;Microbenchmarks&lt;/a&gt; testing the performance of creating various &lt;code&gt;Intl&lt;/code&gt; objects&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Note that for better performance, it‚Äôs recommended to explicitly create &lt;em&gt;and reuse&lt;/em&gt; an &lt;code&gt;Intl.NumberFormat&lt;/code&gt; or &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; or &lt;code&gt;Intl.Collator&lt;/code&gt; object, rather than calling methods like &lt;code&gt;toLocaleString&lt;/code&gt; or &lt;code&gt;localeCompare&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;new-intl-features&quot;&gt;New &lt;code&gt;Intl&lt;/code&gt; features &lt;a class=&quot;bookmark&quot; href=&quot;#new-intl-features&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All of this work has provided a great foundation to build new features on and we‚Äôre continuing to ship all the new Internationalization proposals that are in Stage 3.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://v8.js.cn/features/intl-relativetimeformat&quot;&gt;&lt;code&gt;Intl.RelativeTimeFormat&lt;/code&gt;&lt;/a&gt; has shipped in Chrome 71, &lt;a href=&quot;https://v8.js.cn/features/intl-listformat&quot;&gt;&lt;code&gt;Intl.ListFormat&lt;/code&gt;&lt;/a&gt; has shipped in Chrome 72, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Locale&quot;&gt;&lt;code&gt;Intl.Locale&lt;/code&gt;&lt;/a&gt; has shipped in Chrome 74, and &lt;a href=&quot;https://github.com/tc39/proposal-intl-datetime-style&quot;&gt;&lt;code&gt;dateStyle&lt;/code&gt; and &lt;code&gt;timeStyle&lt;/code&gt; options for &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/tc39/ecma402/pull/236&quot;&gt;BigInt support for &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; are shipping in Chrome 76. &lt;a href=&quot;https://github.com/tc39/proposal-intl-DateTimeFormat-formatRange&quot;&gt;&lt;code&gt;Intl.DateTimeFormat#formatRange&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/tc39/proposal-intl-segmenter/&quot;&gt;&lt;code&gt;Intl.Segmenter&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://github.com/tc39/proposal-unified-intl-numberformat/&quot;&gt;additional options for &lt;code&gt;Intl.NumberFormat&lt;/code&gt;&lt;/a&gt; are currently under development in V8, and we hope to ship them soon!&lt;/p&gt;
&lt;p&gt;Many of these new APIs, and others further down the pipeline, are due to our work on standardizing new features to help developers with internationalization. &lt;a href=&quot;https://github.com/tc39/proposal-intl-displaynames&quot;&gt;&lt;code&gt;Intl.DisplayNames&lt;/code&gt;&lt;/a&gt; is a Stage 1 proposal that allows users to localize the display names of language, region or script display names. &lt;a href=&quot;https://github.com/fabalbon/proposal-intl-DateTimeFormat-formatRange&quot;&gt;&lt;code&gt;Intl.DateTimeFormat#formatRange&lt;/code&gt;&lt;/a&gt; is a Stage 3 proposal that specifies a way to format date ranges in a concise and locale-aware manner. &lt;a href=&quot;https://github.com/tc39/proposal-unified-intl-numberformat&quot;&gt;The unified &lt;code&gt;Intl.NumberFormat&lt;/code&gt; API proposal&lt;/a&gt; is a Stage 3 proposal that improves &lt;code&gt;Intl.NumberFormat&lt;/code&gt; by adding support for measurement units, currency and sign display policies, and scientific and compact notation. You can get involved in the future of ECMA-402 as well, by contributing at &lt;a href=&quot;https://github.com/tc39/ecma402&quot;&gt;its GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Intl&lt;/code&gt; provides a feature-rich API for several operations needed in internationalizing your web app, leaving the heavy lifting to the browser, without shipping as much data or code over the wire. Thinking through the proper use of these APIs can lead your UI to work better in different locales. Due to the work by the Google V8 and i18n teams in collaboration with TC39 and its ECMA-402 subgroup, you can now access more functionality with better performance, and expect further improvements over time.&lt;/p&gt;
</content></entry><entry><title>A year with Spectre: a V8 perspective</title><link href="https://v8.js.cn/blog/spectre/"/><updated>2019-04-23T14:15:22+00:00</updated><id>https://v8.js.cn/blog/spectre/</id><author><name>Ben L. Titzer and Jaroslav Sevcik</name></author><content type="html">&lt;p&gt;On January 3, 2018, Google Project Zero and others &lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html&quot;&gt;disclosed&lt;/a&gt; the first three of a new class of vulnerabilities that affect CPUs that perform speculative execution, dubbed &lt;a href=&quot;https://spectreattack.com/spectre.pdf&quot;&gt;Spectre&lt;/a&gt; and &lt;a href=&quot;https://meltdownattack.com/meltdown.pdf&quot;&gt;Meltdown&lt;/a&gt;. Using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Speculative_execution&quot;&gt;speculative execution&lt;/a&gt; mechanisms of CPUs, an attacker could temporarily bypass both implicit and explicit safety checks in code that prevent programs from reading unauthorized data in memory. While processor speculation was designed to be a microarchitectural detail, invisible at the architectural level, carefully crafted programs could read unauthorized information in speculation and disclose it through side channels such as the execution time of a program fragment.&lt;/p&gt;
&lt;p&gt;When it was shown that JavaScript could be used to mount Spectre attacks, the V8 team became involved in tackling the problem. We formed an emergency response team and worked closely with other teams at Google, our partners at other browser vendors, and our hardware partners. In concert with them, we proactively engaged in both offensive research (constructing proof-of-concept gadgets) and defensive research (mitigations for potential attacks).&lt;/p&gt;
&lt;p&gt;A Spectre attack consists of two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Leak of otherwise-inaccessible data into hidden CPU state.&lt;/em&gt; All known Spectre attacks use speculation to leak bits of inaccessible data into CPU caches.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Extract the hidden state&lt;/em&gt; to recover the inaccessible data. For this, the attacker needs a clock of sufficient precision. (Surprisingly low-resolution clocks can be sufficient, especially with techniques such as edge thresholding.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In theory, it would be sufficient to defeat either of the two components of an attack. Since we do not know of any way to defeat any of the parts perfectly, we designed and deployed mitigations that greatly reduce the amount of information that is leaked into CPU caches &lt;em&gt;and&lt;/em&gt; mitigations that make it hard to recover the hidden state.&lt;/p&gt;
&lt;h2 id=&quot;high-precision-timers&quot;&gt;High-precision timers &lt;a class=&quot;bookmark&quot; href=&quot;#high-precision-timers&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The tiny state changes that can survive speculative execution give rise to correspondingly tiny, almost impossibly tiny, timing differences ‚Äî on the order of a billionth of a second. To directly detect individual such differences, an attacker program needs a high precision timer. CPUs offer such timers, but the Web Platform does not expose them. The Web Platform‚Äôs most precise timer, &lt;code&gt;performance.now()&lt;/code&gt;, had a resolution of single-digit micro-seconds, which was originally thought unusable for this purpose. Yet two years ago, an academic research team specializing in micro-architectural attacks published &lt;a href=&quot;https://gruss.cc/files/fantastictimers.pdf&quot;&gt;a paper&lt;/a&gt; that studied the availability of timers in the web platform. They concluded that concurrent mutable shared memory and various resolution-recovery techniques could allow the construction of even higher resolution timers, down to nanosecond resolution. Such timers are precise enough to detect individual L1 cache hits and misses, which is usually how Spectre gadgets leak information.&lt;/p&gt;
&lt;h2 id=&quot;timer-mitigations&quot;&gt;Timer mitigations &lt;a class=&quot;bookmark&quot; href=&quot;#timer-mitigations&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To disrupt the ability to detect small timing differences, browser vendors took a multi-pronged approach. On all browsers, the resolution of &lt;code&gt;performance.now()&lt;/code&gt; was reduced (in Chrome, from 5 microseconds to 100), and random uniform jitter was introduced to prevent resolution recovery. After consultation among all the vendors, together we decided to take the unprecedented step of immediately and retroactively disabling the &lt;code&gt;SharedArrayBuffer&lt;/code&gt; API across all browsers in order to prevent the construction of a nanosecond timer that could be used for Spectre attacks.&lt;/p&gt;
&lt;h2 id=&quot;amplification&quot;&gt;Amplification &lt;a class=&quot;bookmark&quot; href=&quot;#amplification&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It became clear early on in our offensive research that timer mitigations alone would not be sufficient. One reason why is that an attacker may simply repeatedly execute their gadget so that the cumulative time difference is much larger than a single cache hit or miss. We were able to engineer reliable gadgets that use many cache lines at a time, up to the cache capacity, yielding timing differences as large as 600 microseconds. We later discovered arbitrary amplification techniques that are not limited by the cache capacity. Such amplification techniques rely on multiple attempts to read the secret data.&lt;/p&gt;
&lt;h2 id=&quot;jit-mitigations&quot;&gt;JIT mitigations &lt;a class=&quot;bookmark&quot; href=&quot;#jit-mitigations&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To read inaccessible data using Spectre, the attacker tricks the CPU into speculatively executing code that reads normally inaccessible data and encodes it into the cache. The attack can be broken in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prevent speculative execution of code.&lt;/li&gt;
&lt;li&gt;Prevent speculative execution from reading inaccessible data.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We have experimented with (1) by inserting the recommended speculation barrier instructions, such as Intel‚Äôs &lt;code&gt;LFENCE&lt;/code&gt;, on every critical conditional branch, and by using &lt;a href=&quot;https://support.google.com/faqs/answer/7625886&quot;&gt;retpolines&lt;/a&gt; for indirect branches. Unfortunately, such heavy-handed mitigations greatly reduce performance (2‚Äì3√ó slowdown on the Octane benchmark). Instead, we chose approach (2), inserting mitigation sequences that prevent reading secret data due to mis-speculation. Let us illustrate the technique on the following code snippet:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;condition&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For simplicity, let us assume condition is &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;. The code above is vulnerable if the CPU speculatively reads from &lt;code&gt;a[i]&lt;/code&gt; when &lt;code&gt;i&lt;/code&gt; is out-of-bounds, accessing normally inaccessible data. The important observation is that in such case, the speculation tries to read &lt;code&gt;a[i]&lt;/code&gt; when &lt;code&gt;condition&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;. Our mitigation rewrites this program so that it behaves exactly like the original program but does not leak any speculatively loaded data.&lt;/p&gt;
&lt;p&gt;We reserve one CPU register which we call the poison to track whether code is executing in a mispredicted branch. The poison register is maintained across all branches and calls in generated code, so that any mispredicted branch causes the poison register to become &lt;code&gt;0&lt;/code&gt;. Then we instrument all memory accesses so that they unconditionally mask the result of all loads with the current value of the poison register. This does not prevent the processor from predicting (or mispredicting) branches, but destroys the information of (potentially out-of-bounds) loaded values due to mispredicted branches. The instrumented code is shown below (assuming that &lt;code&gt;a&lt;/code&gt; is a number array).&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; poison &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// ‚Ä¶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;condition&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  poison &lt;span class=&quot;token operator&quot;&gt;*=&lt;/span&gt; condition&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; poison&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The additional code does not have any effect on the normal (architecturally-defined) behavior of the program. It only affects micro-architectural state when running on speculating CPUs. If the program was instrumented at source level, advanced optimizations in modern compilers might remove such instrumentation. In V8, we prevent our compiler from removing the mitigations by inserting them in a very late phase of compilation.&lt;/p&gt;
&lt;p&gt;We also use the poisoning technique to prevent leaks from misspeculated indirect branches in the interpreter‚Äôs bytecode dispatch loop and in the JavaScript function call sequence. In the interpreter, we set the poison to &lt;code&gt;0&lt;/code&gt; if the bytecode handler (i.e. the machine code sequence that interprets a single bytecode) does not match the current bytecode. For JavaScript calls, we pass the target function as a parameter (in a register) and we set the poison to &lt;code&gt;0&lt;/code&gt; at the beginning of each function if the incoming target function does not match the current function. With the poisoning mitigations in place, we see less than 20% slowdown on the Octane benchmark.&lt;/p&gt;
&lt;p&gt;The mitigations for WebAssembly are simpler, since the main safety check is to ensure memory accesses are within bounds. For 32-bit platforms, in addition to the normal bounds checks, we pad all memories to the next power of two and unconditionally mask off any upper bits of a user-supplied memory index. 64-bit platforms need no such mitigation, since the implementation uses virtual memory protection for bounds checks. We experimented with compiling switch/case statements to binary search code rather than using a potentially vulnerable indirect branch, but this is too expensive on some workloads. Indirect calls are protected with retpolines.&lt;/p&gt;
&lt;h2 id=&quot;software-mitigations-are-an-unsustainable-path&quot;&gt;Software mitigations are an unsustainable path &lt;a class=&quot;bookmark&quot; href=&quot;#software-mitigations-are-an-unsustainable-path&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fortunately or unfortunately, our offensive research advanced much faster than our defensive research, and we quickly discovered that software mitigation of all possible leaks due to Spectre was infeasible. This was due to a variety of reasons. First, the engineering effort diverted to combating Spectre was disproportionate to its threat level. In V8 we face many other security threats that are much worse, from direct out-of-bound reads due to regular bugs (faster and more direct than Spectre), out-of-bound writes (impossible with Spectre, and worse) and potential remote code execution (impossible with Spectre and much, much worse). Second, the increasingly complicated mitigations that we designed and implemented carried significant complexity, which is technical debt and might actually increase the attack surface, and performance overheads. Third, testing and maintaining mitigations for microarchitectural leaks is even trickier than designing gadgets themselves, since it‚Äôs hard to be sure the mitigations continue working as designed. At least once, important mitigations were effectively undone by later compiler optimizations. Fourth, we found that effective mitigation of some variants of Spectre, particularly variant 4, to be simply infeasible in software, even after a heroic effort by our partners at Apple to combat the problem in their JIT compiler.&lt;/p&gt;
&lt;h2 id=&quot;site-isolation&quot;&gt;Site isolation &lt;a class=&quot;bookmark&quot; href=&quot;#site-isolation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our research reached the conclusion that, in principle, untrusted code can read a process‚Äôs entire address space using Spectre and side channels. Software mitigations reduce the effectiveness of many potential gadgets, but are not efficient or comprehensive. The only effective mitigation is to move sensitive data out of the process‚Äôs address space. Thankfully, Chrome already had an effort underway for many years to separate sites into different processes to reduce the attack surface due to conventional vulnerabilities. This investment paid off, and we productionized and deployed &lt;a href=&quot;https://developers.google.com/web/updates/2018/07/site-isolation&quot;&gt;site isolation&lt;/a&gt; for as many platforms as possible by May 2018. Thus Chrome‚Äôs security model no longer assumes language-enforced confidentiality within a renderer process.&lt;/p&gt;
&lt;p&gt;Spectre has been a long journey and has highlighted the best in collaboration across vendors in the industry and academia. So far, white hats appear to be ahead of black hats. We still know of no attacks in the wild, outside of the curious tinkerers and professional researchers developing proof of concept gadgets. New variants of these vulnerabilities continue to trickle out, and may continue to do so for some time. We continue to track these threats and take them seriously.&lt;/p&gt;
&lt;p&gt;Like many with a background in programming languages and their implementations, the idea that safe languages enforce a proper abstraction boundary, not allowing well-typed programs to read arbitrary memory, has been a guarantee upon which our mental models have been built. It is a depressing conclusion that our models were wrong ‚Äî this guarantee is not true on today‚Äôs hardware. Of course, we still believe that safe languages have great engineering benefits and will continue to be the basis for the future, but‚Ä¶ on today‚Äôs hardware they leak a little.&lt;/p&gt;
&lt;p&gt;Interested readers can dig into more details in &lt;a href=&quot;https://arxiv.org/pdf/1902.05178.pdf&quot;&gt;our whitepaper&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Blazingly fast parsing, part 2: lazy parsing</title><link href="https://v8.js.cn/blog/preparser/"/><updated>2019-04-15T17:03:37+00:00</updated><id>https://v8.js.cn/blog/preparser/</id><author><name>Toon Verwaest (@tverwaes) and Marja H√∂ltt√§ (@marjakh), sparser parsers</name></author><content type="html">&lt;p&gt;This is the second part of our series explaining how V8 parses JavaScript as fast as possible. The first part explained how we made V8‚Äôs &lt;a href=&quot;https://v8.js.cn/blog/scanner&quot;&gt;scanner&lt;/a&gt; fast.&lt;/p&gt;
&lt;p&gt;Parsing is the step where source code is turned into an intermediate representation to be consumed by a compiler (in V8, the bytecode compiler &lt;a href=&quot;https://v8.js.cn/blog/ignition-interpreter&quot;&gt;Ignition&lt;/a&gt;). Parsing and compiling happens on the critical path of web page startup, and not all functions shipped to the browser are immediately needed during startup. Even though developers can delay such code with async and deferred scripts, that‚Äôs not always feasible. Additionally, many web pages ship code that‚Äôs only used by certain features which may not be accessed by a user at all during any individual run of the page.&lt;/p&gt;
&lt;p&gt;Eagerly compiling code unnecessarily has real resource costs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU cycles are used to create the code, delaying the availability of code that‚Äôs actually needed for startup.&lt;/li&gt;
&lt;li&gt;Code objects take up memory, at least until &lt;a href=&quot;https://v8.js.cn/blog/v8-release-74#bytecode-flushing&quot;&gt;bytecode flushing&lt;/a&gt; decides that the code isn‚Äôt currently needed and allows it to be garbage-collected.&lt;/li&gt;
&lt;li&gt;Code compiled by the time the top-level script finishes executing ends up being cached on disk, taking up disk space.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For these reasons, all major browsers implement &lt;em&gt;lazy parsing&lt;/em&gt;. Instead of generating an abstract syntax tree (AST) for each function and then compiling it to bytecode, the parser can decide to ‚Äúpre-parse‚Äù functions it encounters instead of fully parsing them. It does so by switching to &lt;a href=&quot;https://cs.chromium.org/chromium/src/v8/src/parsing/preparser.h?l=921&amp;amp;rcl=e3b2feb3aade83c02e4bd2fa46965a69215cd821&quot;&gt;the preparser&lt;/a&gt;, a copy of the parser that does the bare minimum needed to be able to otherwise skip over the function. The preparser verifies that the functions it skips are syntactically valid, and produces all the information needed for the outer functions to be compiled correctly. When a preparsed function is later called, it is fully parsed and compiled on-demand.&lt;/p&gt;
&lt;h2 id=&quot;variable-allocation&quot;&gt;Variable allocation &lt;a class=&quot;bookmark&quot; href=&quot;#variable-allocation&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The main thing that complicates pre-parsing is variable allocation.&lt;/p&gt;
&lt;p&gt;For performance reasons, function activations are managed on the machine stack. E.g., if a function &lt;code&gt;g&lt;/code&gt; calls a function &lt;code&gt;f&lt;/code&gt; with arguments &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// The return instruction pointer of `f` now points here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// (because when `f` `return`s, it returns here).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First the receiver (i.e. the &lt;code&gt;this&lt;/code&gt; value for &lt;code&gt;f&lt;/code&gt;, which is &lt;code&gt;globalThis&lt;/code&gt; since it‚Äôs a sloppy function call) is pushed on the stack, followed by the called function &lt;code&gt;f&lt;/code&gt;. Then arguments &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; are pushed on the stack. At that point the function &lt;code&gt;f&lt;/code&gt; is called. To execute the call, we first save the state of &lt;code&gt;g&lt;/code&gt; on the stack: the ‚Äúreturn instruction pointer‚Äù (&lt;code&gt;rip&lt;/code&gt;; what code we need to return to) of &lt;code&gt;f&lt;/code&gt; as well as the ‚Äúframe pointer‚Äù (&lt;code&gt;fp&lt;/code&gt;; what the stack should look like on return). Then we enter &lt;code&gt;f&lt;/code&gt;, which allocates space for the local variable &lt;code&gt;c&lt;/code&gt;, as well as any temporary space it may need. This ensures that any data used by the function disappears when the function activation goes out of scope: it‚Äôs simply popped from the stack.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/preparser/stack-1.svg&quot; width=&quot;173&quot; height=&quot;333&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Stack layout of a call to function &lt;code&gt;f&lt;/code&gt; with arguments &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and local variable &lt;code&gt;c&lt;/code&gt; allocated on the stack.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The problem with this setup is that functions can reference variables declared in outer functions. Inner functions can outlive the activation in which they were created:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make_f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ‚Üê declaration of `d`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ‚Üê reference to `d`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; f &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make_f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above example, the reference from &lt;code&gt;inner&lt;/code&gt; to the local variable &lt;code&gt;d&lt;/code&gt; declared in &lt;code&gt;make_f&lt;/code&gt; is evaluated after &lt;code&gt;make_f&lt;/code&gt; has returned. To implement this, VMs for languages with lexical closures allocate variables referenced from inner functions on the heap, in a structure called a ‚Äúcontext‚Äù.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/preparser/stack-2.svg&quot; width=&quot;428&quot; height=&quot;292&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Stack layout of a call to &lt;code&gt;make_f&lt;/code&gt; with the argument copied to a context allocated on the heap for later use by &lt;code&gt;inner&lt;/code&gt; that captures &lt;code&gt;d&lt;/code&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This means that for each variable declared in a function, we need to know whether an inner function references the variable, so we can decide whether to allocate the variable on the stack or in a heap-allocated context. When we evaluate a function literal, we allocate a closure that points both to the code for the function, as well as the current context: the object that contains the variable values it may need access to.&lt;/p&gt;
&lt;p&gt;Long story short, we do need to track at least variable references in the preparser.&lt;/p&gt;
&lt;p&gt;If we‚Äôd only track references though, we would overestimate what variables are referenced. A variable declared in an outer function could be shadowed by a redeclaration in an inner function, making a reference from that inner function target the inner declaration, not the outer declaration. If we‚Äôd unconditionally allocate the outer variable in the context, performance would suffer. Hence for variable allocation to properly work with preparsing, we need to make sure that preparsed functions properly keep track of variable references as well as declarations.&lt;/p&gt;
&lt;p&gt;Top-level code is an exception to this rule. The top-level of a script is always heap-allocated, since variables are visible across scripts. An easy way to get close to a well-working architecture is to simply run the preparser without variable tracking to fast-parse top-level functions; and to use the full parser for inner functions, but skip compiling them. This is more costly than preparsing since we unnecessarily build up an entire AST, but it gets us up and running. This is exactly what V8 did up to V8 v6.3 / Chrome 63.&lt;/p&gt;
&lt;h2 id=&quot;teaching-the-preparser-about-variables&quot;&gt;Teaching the preparser about variables &lt;a class=&quot;bookmark&quot; href=&quot;#teaching-the-preparser-about-variables&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tracking variable declarations and references in the preparser is complicated because in JavaScript it isn‚Äôt always clear from the start what the meaning of a partial expression is. E.g., suppose we have a function &lt;code&gt;f&lt;/code&gt; with a parameter &lt;code&gt;d&lt;/code&gt;, which has an inner function &lt;code&gt;g&lt;/code&gt; with an expression that looks like it might reference &lt;code&gt;d&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; d &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It could indeed end up referencing &lt;code&gt;d&lt;/code&gt;, because the tokens we saw are part of a destructuring assignment expression.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; d &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It could also end up being an arrow function with a destructuring parameter &lt;code&gt;d&lt;/code&gt;, in which case the &lt;code&gt;d&lt;/code&gt; in &lt;code&gt;f&lt;/code&gt; isn‚Äôt referenced by &lt;code&gt;g&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; d &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Initially our preparser was implemented as a standalone copy of the parser without too much sharing, which caused the two parsers to diverge over time. By rewriting the parser and preparser to be based on a &lt;code&gt;ParserBase&lt;/code&gt; implementing the &lt;a href=&quot;https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern&quot;&gt;curiously recurring template pattern&lt;/a&gt;, we managed to maximize sharing while keeping the performance benefits of separate copies. This greatly simplified adding full variable tracking to the preparser, since a large part of the implementation can be shared between the parser and the preparser.&lt;/p&gt;
&lt;p&gt;Actually it was incorrect to ignore variable declarations and references even for top-level functions. The ECMAScript spec requires various types of variable conflicts to be detected upon first parse of the script. E.g., if a variable is twice declared as a lexical variable in the same scope, that is considered an &lt;a href=&quot;https://tc39.es/ecma262/#early-error&quot;&gt;early &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;. Since our preparser simply skipped over variable declarations, it would incorrectly allow the code during preparse. At the time we considered that the performance win warranted the spec violation. Now that the preparser tracks variables properly, however, we eradicated this entire class of variable resolution-related spec violations at no significant performance cost.&lt;/p&gt;
&lt;h2 id=&quot;skipping-inner-functions&quot;&gt;Skipping inner functions &lt;a class=&quot;bookmark&quot; href=&quot;#skipping-inner-functions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As mentioned earlier, when a preparsed function is called for the first time, we parse it fully and compile the resulting AST to bytecode.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// This is the top-level scope.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// preparsed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// preparsed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Fully parses and compiles `outer`, but not `inner`.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function directly points to the outer context which contains the values of variable declarations that need to be available to inner functions. To allow lazy compilation of functions (and to support the debugger), the context points to a metadata object called &lt;a href=&quot;https://cs.chromium.org/chromium/src/v8/src/objects/scope-info.h?rcl=ce2242080787636827dd629ed5ee4e11a4368b9e&amp;amp;l=36&quot;&gt;&lt;code&gt;ScopeInfo&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;ScopeInfo&lt;/code&gt; objects describe what variables are listed in a context. This means that while compiling inner functions, we can compute where variables live in the context chain.&lt;/p&gt;
&lt;p&gt;To compute whether or not the lazy compiled function itself needs a context, though, we need to perform scope resolution again: We need to know whether functions nested in the lazy-compiled function reference the variables declared by the lazy function. We can figure this out by re-preparsing those functions. This is exactly what V8 did up to V8 v6.3 / Chrome 63. This is not ideal performance-wise though, as it makes the relation between source size and parse cost nonlinear: we would preparse functions as many times as they are nested. In addition to natural nesting of dynamic programs, JavaScript packers commonly wrap code in ‚Äú&lt;a href=&quot;https://en.wikipedia.org/wiki/Immediately_invoked_function_expression&quot;&gt;immediately-invoked function expressions&lt;/a&gt;‚Äù (IIFEs), making most JavaScript programs have multiple nesting layers.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/preparser/parse-complexity-before.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Each reparse adds at least the cost of parsing the function.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To avoid the nonlinear performance overhead, we perform full scope resolution even during preparsing. We store enough metadata so we can later simply &lt;em&gt;skip&lt;/em&gt; inner functions, rather than having to re-preparse them. One way would be to store variable names referenced by inner functions. This is expensive to store and requires us to still duplicate work: we have already performed variable resolution during preparse.&lt;/p&gt;
&lt;p&gt;Instead, we serialize where variables are allocated as a dense array of flags per variable. When we lazy-parse a function, variables are recreated in the same order as the preparser saw them, and we can simply apply the metadata to the variables. Now that the function is compiled, the variable allocation metadata is not needed anymore and can be garbage-collected. Since we only need this metadata for functions that actually contain inner functions, a large fraction of all functions does not even need this metadata, significantly reducing the memory overhead.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/preparser/parse-complexity-after.svg&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;By keeping track of metadata for preparsed functions we can completely skip inner functions.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The performance impact of skipping inner functions is, just like the overhead of re-preparsing inner functions, nonlinear. There are sites that hoist all their functions to the top-level scope. Since their nesting level is always 0, the overhead is always 0. Many modern sites, however, do actually deeply nest functions. On those sites we saw significant improvements when this feature launched in V8 v6.3 / Chrome 63. The main advantage is that now it doesn‚Äôt matter anymore how deeply nested the code is: any function is at most preparsed once, and fully parsed once&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/preparser/skipping-inner-functions.svg&quot; width=&quot;796&quot; height=&quot;503&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Main thread and off-the-main-thread parse time, before and after launching the ‚Äúskipping inner functions‚Äù optimization.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;pife&quot;&gt;Possibly-Invoked Function Expressions &lt;a class=&quot;bookmark&quot; href=&quot;#pife&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As mentioned earlier, packers often combine multiple modules in a single file by wrapping module code in a closure that they immediately call. This provides isolation for the modules, allowing them to run as if they are the only code in the script. These functions are essentially nested scripts; the functions are immediately called upon script execution. Packers commonly ship &lt;em&gt;immediately-invoked function expressions&lt;/em&gt; (IIFEs; pronounced ‚Äúiffies‚Äù) as parenthesized functions: &lt;code&gt;(function(){‚Ä¶})()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since these functions are immediately needed during script execution, it‚Äôs not ideal to preparse such functions. During top-level execution of the script we immediately need the function to be compiled, and we fully parse and compile the function. This means that the faster parse we did earlier to try to speed up startup is guaranteed to be an unnecessary additional cost to startup.&lt;/p&gt;
&lt;p&gt;Why don‚Äôt you simply compile called functions, you might ask? While it‚Äôs typically straight-forward for a developer to notice when a function is called, this is not the case for the parser. The parser needs to decide ‚Äî before it even starts parsing a function! ‚Äî whether it wants to eagerly compile the function or defer compilation. Ambiguities in the syntax make it difficult to simply fast-scan to the end of the function, and the cost quickly resembles the cost of regular preparsing.&lt;/p&gt;
&lt;p&gt;For this reason V8 has two simple patterns it recognizes as &lt;em&gt;possibly-invoked function expressions&lt;/em&gt; (PIFEs; pronounced ‚Äúpiffies‚Äù), upon which it eagerly parses and compiles a function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If a function is a parenthesized function expression, i.e. &lt;code&gt;(function(){‚Ä¶})&lt;/code&gt;, we assume it will be called. We make this assumption as soon as we see the start of this pattern, i.e. &lt;code&gt;(function&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since V8 v5.7 / Chrome 57 we also detect the pattern &lt;code&gt;!function(){‚Ä¶}(),function(){‚Ä¶}(),function(){‚Ä¶}()&lt;/code&gt; generated by &lt;a href=&quot;https://github.com/mishoo/UglifyJS2&quot;&gt;UglifyJS&lt;/a&gt;. This detection kicks in as soon as we see &lt;code&gt;!function&lt;/code&gt;, or &lt;code&gt;,function&lt;/code&gt; if it immediately follows a PIFE.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since V8 eagerly compiles PIFEs, they can be used as &lt;a href=&quot;https://en.wikipedia.org/wiki/Profile-guided_optimization&quot;&gt;profile-directed feedback&lt;/a&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;, informing the browser which functions are needed for startup.&lt;/p&gt;
&lt;p&gt;At a time when V8 still reparsed inner functions, some developers had noticed the impact of JS parsing on startup was pretty high. The package &lt;a href=&quot;https://github.com/nolanlawson/optimize-js&quot;&gt;&lt;code&gt;optimize-js&lt;/code&gt;&lt;/a&gt; turns functions into PIFEs based on static heuristics. At the time the package was created, this had a huge impact on load performance on V8. We‚Äôve replicated these results by running the benchmarks provided by &lt;code&gt;optimize-js&lt;/code&gt; on V8 v6.1, only looking at minified scripts.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/preparser/eager-parse-compile-pife.svg&quot; width=&quot;979&quot; height=&quot;605&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Eagerly parsing and compiling PIFEs results in slightly faster cold and warm startup (first and second page load, measuring total parse + compile + execute times). The benefit is much smaller on V8 v7.5 than it used to be on V8 v6.1 though, due to significant improvements to the parser.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Nevertheless, now that we don‚Äôt reparse inner functions anymore and since the parser has gotten much faster, the performance improvement obtained through &lt;code&gt;optimize-js&lt;/code&gt; is much reduced. The default configuration for v7.5 is in fact already much faster than the optimized version running on v6.1 was. Even on v7.5 it can still makes sense to use PIFEs sparingly for code that is needed during startup: we avoid preparse since we learn early that the function will be needed.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;optimize-js&lt;/code&gt; benchmark results don‚Äôt exactly reflect the real world. The scripts are loaded synchronously, and the entire parse + compile time is counted towards load time. In a real-world setting, you would likely load scripts using &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags. That allows Chrome‚Äôs preloader to discover the script &lt;em&gt;before&lt;/em&gt; it‚Äôs evaluated, and to download, parse, and compile the script without blocking the main thread. Everything that we decide to eagerly compile is automatically compiled off the main thread and should only minimally count towards startup. Running with off-the-main-thread script compilation magnifies the impact of using PIFEs.&lt;/p&gt;
&lt;p&gt;There is still a cost though, especially a memory cost, so it‚Äôs not a good idea to eagerly compile everything:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/preparser/eager-compilation-overhead.svg&quot; width=&quot;477&quot; height=&quot;295&quot; alt=&quot;&quot; loading=&quot;lazy&quot;&gt;
  &lt;figcaption&gt;Eagerly compiling &lt;em&gt;all&lt;/em&gt; JavaScript comes at a significant memory cost.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;While adding parentheses around functions you need during startup is a good idea (e.g., based on profiling startup), using a package like &lt;code&gt;optimize-js&lt;/code&gt; that applies simple static heuristics is not a great idea. It for example assumes that a function will be called during startup if it‚Äôs an argument to a function call. If such a function implements an entire module that‚Äôs only needed much later, however, you end up compiling too much. Over-eagerly compilation is bad for performance: V8 without lazy compilation significantly regresses load time. Additionally, some of the benefits of &lt;code&gt;optimize-js&lt;/code&gt; come from issues with UglifyJS and other minifiers which remove parentheses from PIFEs that aren‚Äôt IIFEs, removing useful hints that could have been applied to e.g., &lt;a href=&quot;https://github.com/umdjs/umd&quot;&gt;Universal Module Definition&lt;/a&gt;-style modules. This is likely an issue that minifiers should fix to get the maximum performance on browsers that eagerly compile PIFEs.&lt;/p&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions &lt;a class=&quot;bookmark&quot; href=&quot;#conclusions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lazy parsing speeds up startup and reduces memory overhead of applications that ship more code than they need. Being able to properly track variable declarations and references in the preparser is necessary to be able to preparse both correctly (per the spec) and quickly. Allocating variables in the preparser also allows us to serialize variable allocation information for later use in the parser so we can avoid having to re-preparse inner functions altogether, avoiding non-linear parse behavior of deeply nested functions.&lt;/p&gt;
&lt;p&gt;PIFEs that can be recognized by the parser avoid initial preparse overhead for code that‚Äôs needed immediately during startup. Careful profile-guided use of PIFEs, or use by packers, can provide a useful cold startup speed bump. Nevertheless, needlessly wrapping functions in parentheses to trigger this heuristic should be avoided since it causes more code to be eagerly compiled, resulting in worse startup performance and increased memory usage.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;For memory reasons, V8 &lt;a href=&quot;https://v8.js.cn/blog/v8-release-74#bytecode-flushing&quot;&gt;flushes bytecode&lt;/a&gt; when it‚Äôs unused for a while. If the code ends up being needed again later on, we reparse and compile it again. Since we allow the variable metadata to die during compilation, that causes a reparse of inner functions upon lazy recompilation. At that point we recreate the metadata for its inner functions though, so we don‚Äôt need to re-preparse inner functions of its inner functions again. &lt;a href=&quot;#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;PIFEs can also be thought of as profile-informed function expressions. &lt;a href=&quot;#fnref2&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry></feed>